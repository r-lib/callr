[{"path":[]},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://callr.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://callr.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 callr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Persistent External R Sessions","text":"callr::r_session class persistent R session runs background can send commands . extends processx::process class, methods class still available use.","code":""},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"starting-and-terminating-an-r-session","dir":"Articles","previous_headings":"","what":"Starting and terminating an R session","title":"Persistent External R Sessions","text":"Use r_session$new() start R session. default r_session$new() blocks, return R session running ready run R commands. error happens process startup, including R error, r_session$new() throws error. blocking r_session$new() waits wait_timeout milliseconds R start . wait_timeout default 3000 milliseconds, plenty. Typically R starts 100-300 milliseconds. terminate R session, call $close() method: Just like processx::process objects, r_session objects finalizer, terminated R object represents garbage collected.","code":"library(callr) system.time(rs <- r_session$new()) #>    user  system elapsed                                                          #>   0.014   0.002   0.180 rs #> R SESSION, alive, idle, pid 9941. rs$get_state() #> [1] \"idle\" rs$close() rs #> R SESSION, finished, pid 9941."},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"non-blocking-startup","dir":"Articles","previous_headings":"Starting and terminating an R session","what":"Non-blocking startup","title":"Persistent External R Sessions","text":"don’t want wait session start , use wait = FALSE r_session$new(). , r_session$new() still error OS start R process, R errors reported asynchronously. can use processx::poll() wait R session ready, timeout. timeout can also 0ms quick check without waiting. lets extra work main process R process starting . also lets start multiple processes concurrently, see next section. important part output process connection. \"ready\" R process running, error happened. \"timeout\" yet ready. output error \"ready\" R process emitted something standard output standard error, respectively. Usually \"silent\" suppress R output startup command line options. can changed via options argument r_session_options(). processx::poll() reports \"ready\" process connection, can call r_session$read() method see startup successful. r_session$$read() reports “201 STARTED”, ready run R code:","code":"system.time(rs2 <- r_session$new(wait = FALSE)) #>    user  system elapsed                                                          #>   0.002   0.002   0.007 rs2 #> R SESSION, alive, starting, pid 9952. rs2$get_state() #> [1] \"starting\" processx::poll(list(rs2), 3000) #> [[1]]                                                                            #>   output    error  process                                                       #> \"silent\" \"silent\"  \"ready\"                                                       #> rs2$read() #> $code                                                                            #> [1] 201                                                                          #>                                                                                  #> $message                                                                         #> [1] \"ready to go\"                                                                #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\""},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"options","dir":"Articles","previous_headings":"","what":"Options","title":"Persistent External R Sessions","text":"can use options argument r_session$new() change default startup options. options must named list best create value r_session_options(). Pass options want change named arguments r_session_options(). See ?r_session_options details. example uses load_hook option run extra code right R started : Use $poll_process() method poll process ready, without polling standard output error. Note, however, process generates enough output stdout stderr fills pipe buffer processes, stop running, main process reads pipe.","code":"opts <- r_session_options(   load_hook = quote({ message(\"I am running!\"); Sys.sleep(1) }) ) rs3 <- r_session$new(wait = FALSE, options = opts) processx::poll(list(rs3), 3000) #> [[1]]                                                                            #>   output    error  process                                                       #> \"silent\"  \"ready\" \"silent\"                                                       #> rs3$read_error() #> [1] \"I am running!\\n\" rs3$poll_process(3000) #> [1] \"ready\" rs3$read() #> $code                                                                            #> [1] 201                                                                          #>                                                                                  #> $message                                                                         #> [1] \"ready to go\"                                                                #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\""},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"running-multiple-r-sessions","dir":"Articles","previous_headings":"","what":"Running multiple R sessions","title":"Persistent External R Sessions","text":"need start several R sessions quickly, best use wait = FALSE processx::poll() processes ready.","code":"num_procs <- 4 procs <- tibble::tibble(   session = replicate(num_procs, r_session$new(wait = FALSE), simplify = FALSE),   started_at = Sys.time(),   start_result = list(NULL) ) limit <- Sys.time() + as.difftime(5, units = \"secs\") while ((now <- Sys.time()) < limit &&        any(vapply(procs$session, function(p) p$get_state(), \"\") == \"starting\")) {   timeout <- as.double(limit - now, units = \"secs\")   pr <- processx::poll(procs$session, as.integer(timeout * 1000))   lapply(seq_along(pr), function(i) {     if (pr[[i]][[\"process\"]] == \"ready\") {       procs$start_result[[i]] <<- procs$session[[i]]$read()     }   }) } Sys.time() - procs$started_at #> Time differences in secs                                                         #> [1] 0.292556 0.292556 0.292556 0.292556 procs$start_result #> [[1]]                                                                            #> $code                                                                            #> [1] 201                                                                          #>                                                                                  #> $message                                                                         #> [1] \"ready to go\"                                                                #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\"                                                       #>                                                                                  #> [[2]]                                                                            #> $code                                                                            #> [1] 201                                                                          #>                                                                                  #> $message                                                                         #> [1] \"ready to go\"                                                                #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\"                                                       #>                                                                                  #> [[3]]                                                                            #> $code                                                                            #> [1] 201                                                                          #>                                                                                  #> $message                                                                         #> [1] \"ready to go\"                                                                #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\"                                                       #>                                                                                  #> [[4]]                                                                            #> $code                                                                            #> [1] 201                                                                          #>                                                                                  #> $message                                                                         #> [1] \"ready to go\"                                                                #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\"                                                       #>"},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"running-code","dir":"Articles","previous_headings":"","what":"Running code","title":"Persistent External R Sessions","text":"r_session objects three methods run R code: $run() synchronous omits standard output error. $run_with_output() synchronous collects standard output error. $call() asynchronous collects standard output error. Let’s use 4 R sessions created demonstrate . $run() simplest: $run_with_output() output well: $call() starts running function, wait result: Use processx::poll() wait one sessions finish job: can use $read() method read result (error, failure happened): wait processes ready, can use loop similar one used start . might find helper function useful starting point: Errors $run() turned errors main process: callr also adds two stack traces output, one main process one subprocess: Errors $call() returned error entry result:","code":"procs$session[[1]]$run(function() glue::glue(\"I am process {Sys.getpid()}.\")) #> I am process 9972. procs$session[[1]]$run_with_output(function() {   message(\"I am process \", Sys.getpid(), \".\")   head(mtcars) }) #> $code                                                                            #> [1] 200                                                                          #>                                                                                  #> $message                                                                         #> [1] \"done callr-rs-result-26cc21813598\"                                          #>                                                                                  #> $result                                                                          #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb             #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4             #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4             #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1             #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1             #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2             #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1             #>                                                                                  #> $stdout                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $stderr                                                                          #> [1] \"I am process 9972.\\n\"                                                       #>                                                                                  #> $error                                                                           #> NULL                                                                             #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\" invisible(lapply(procs$session, function(p) {     p$call(function() {       Sys.sleep(runif(1) * 2)       glue::glue(\"I am process {Sys.getpid()}.\")     }) })) procs$session #> [[1]]                                                                            #> R SESSION, alive, busy, pid 9972.                                                #>                                                                                  #> [[2]]                                                                            #> R SESSION, alive, busy, pid 9974.                                                #>                                                                                  #> [[3]]                                                                            #> R SESSION, alive, busy, pid 9979.                                                #>                                                                                  #> [[4]]                                                                            #> R SESSION, alive, busy, pid 9984.                                                #> pr <- processx::poll(procs$session, 5000) pr #> [[1]]                                                                            #>   output    error  process                                                       #> \"silent\" \"silent\"  \"ready\"                                                       #>                                                                                  #> [[2]]                                                                            #>   output    error  process                                                       #> \"silent\" \"silent\" \"silent\"                                                       #>                                                                                  #> [[3]]                                                                            #>   output    error  process                                                       #> \"silent\" \"silent\" \"silent\"                                                       #>                                                                                  #> [[4]]                                                                            #>   output    error  process                                                       #> \"silent\" \"silent\" \"silent\"                                                       #> for (i in seq_along(pr)) {   if (pr[[i]][[\"process\"]] == \"ready\") {     cat(\"Process \", i, \" is ready:\\n\")     print(procs$session[[i]]$read())   } } #> Process  1  is ready:                                                            #> $code                                                                            #> [1] 200                                                                          #>                                                                                  #> $message                                                                         #> [1] \"done callr-rs-result-26cc35953699\"                                          #>                                                                                  #> $result                                                                          #> I am process 9972.                                                               #>                                                                                  #> $stdout                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $stderr                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $error                                                                           #> NULL                                                                             #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\" wait_for_sessions <- function(sess, timeout = 5000) {   result <- vector(\"list\", length(sess))   is_busy <- function() {     vapply(sess, function(s) s$get_state() == \"busy\", logical(1))   }   limit <- Sys.time() + as.difftime(timeout / 1000, units = \"secs\")   while ((now < Sys.time()) < limit && any(busy <- is_busy())) {     towait <- as.integer(as.double(limit - now, units = \"secs\") * 1000)     pr <- processx::poll(sess[busy], towait)     for (i in seq_along(pr)) {       if (pr[[i]][[\"process\"]] == \"ready\") {         result[busy][[i]] <- sess[busy][[i]]$read()       }     }   }   result } wait_for_sessions(procs$session) #> [[1]]                                                                            #> NULL                                                                             #>                                                                                  #> [[2]]                                                                            #> $code                                                                            #> [1] 200                                                                          #>                                                                                  #> $message                                                                         #> [1] \"done callr-rs-result-26cc3a4281fe\"                                          #>                                                                                  #> $result                                                                          #> I am process 9974.                                                               #>                                                                                  #> $stdout                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $stderr                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $error                                                                           #> NULL                                                                             #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\"                                                       #>                                                                                  #> [[3]]                                                                            #> $code                                                                            #> [1] 200                                                                          #>                                                                                  #> $message                                                                         #> [1] \"done callr-rs-result-26cc55ae7679\"                                          #>                                                                                  #> $result                                                                          #> I am process 9979.                                                               #>                                                                                  #> $stdout                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $stderr                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $error                                                                           #> NULL                                                                             #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\"                                                       #>                                                                                  #> [[4]]                                                                            #> $code                                                                            #> [1] 200                                                                          #>                                                                                  #> $message                                                                         #> [1] \"done callr-rs-result-26cc6b08a2ca\"                                          #>                                                                                  #> $result                                                                          #> I am process 9984.                                                               #>                                                                                  #> $stdout                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $stderr                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $error                                                                           #> NULL                                                                             #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\"                                                       #> rs <- r_session$new() rs$run(function() library(\"not-a-package\")) #> Error:                                                                           #> ! in callr subprocess.                                                           #> Caused by error in `library(\"not-a-package\")`:                                   #> ! there is no package called ‘not-a-package’                                     #> Type .Last.error to see the more details. .Last.error #> <callr_error/rlib_error_3_0/rlib_error/error>                                    #> Error:                                                                           #> ! in callr subprocess.                                                           #> Caused by error in `library(\"not-a-package\")`:                                   #> ! there is no package called ‘not-a-package’                                     #> ---                                                                              #> Backtrace:                                                                       #> 1. rs$run(function() library(\"not-a-package\"))                                   #> 2. callr:::rs_run(self, private, func, args, package)                            #> 3. callr:::throw(res$error)                                                      #> ---                                                                              #> Subprocess backtrace:                                                            #> 1. base::library(\"not-a-package\")                                                #> 2. base::stop(packageNotFoundError(package, lib.loc, sys.call()))                #> 3. global (function (e) … rs$call(function() library(\"still-not\")) rs$poll_process(2000) rs$read() #> [1] \"ready\"                                                                      #> $code                                                                            #> [1] 200                                                                          #>                                                                                  #> $message                                                                         #> [1] \"done callr-rs-result-26cc123aeb62\"                                          #>                                                                                  #> $result                                                                          #> NULL                                                                             #>                                                                                  #> $stdout                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $stderr                                                                          #> [1] \"\"                                                                           #>                                                                                  #> $error                                                                           #> <callr_error/rlib_error_3_0/rlib_error/error>                                    #> Error:                                                                           #> ! in callr subprocess.                                                           #> Caused by error in `library(\"still-not\")`:                                       #> ! there is no package called ‘still-not’                                         #> ---                                                                              #> Subprocess backtrace:                                                            #> 1. base::library(\"still-not\")                                                    #> 2. base::stop(packageNotFoundError(package, lib.loc, sys.call()))                #> 3. global (function (e) …                                                        #>                                                                                  #> attr(,\"class\")                                                                   #> [1] \"callr_session_result\""},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"debugging","dir":"Articles","previous_headings":"","what":"Debugging","title":"Persistent External R Sessions","text":"Debugging subprocesses hard. r_session objects couple methods help , still hard.","code":""},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"stack-traces","dir":"Articles","previous_headings":"Debugging","what":"Stack traces","title":"Persistent External R Sessions","text":"seen , callr returns stack traces errors, main process subprocess. packages installed source references, include links source files well.","code":""},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"last-error","dir":"Articles","previous_headings":"Debugging","what":".Last.error","title":"Persistent External R Sessions","text":"errors re-thrown main process, callr sets .Last.error variable last error object. can inspect error. .Last.error$parent contains error object subprocess. error object often additional information error, e.g. processx::run() includes standard output + error system process exits non-successful status:","code":"rs <- r_session$new() rs$run(function() processx::run(\"ls\", \"/not-this\")) #> Error:                                                                           #> ! in callr subprocess.                                                           #> Caused by error in `processx::run(\"ls\", \"/not-this\")`:                           #> ! System command 'ls' failed                                                     #> Type .Last.error to see the more details. .Last.error #> <callr_error/rlib_error_3_0/rlib_error/error>                                    #> Error:                                                                           #> ! in callr subprocess.                                                           #> Caused by error in `processx::run(\"ls\", \"/not-this\")`:                           #> ! System command 'ls' failed                                                     #> ---                                                                              #> Backtrace:                                                                       #> 1. rs$run(function() processx::run(\"ls\", \"/not-this\"))                           #> 2. callr:::rs_run(self, private, func, args, package)                            #> 3. callr:::throw(res$error)                                                      #> ---                                                                              #> Subprocess backtrace:                                                            #> 1. processx::run(\"ls\", \"/not-this\")                                              #> 2. base::throw(new_process_error(res, call = sys.call(), echo = echo, …          #> 3. | base::signalCondition(cond)                                                 #> 4. global (function (e) … .Last.error$parent #> <system_command_status_error/rlib_error_3_0/rlib_error/error>                    #> Error in `processx::run(\"ls\", \"/not-this\")`:                                     #> ! System command 'ls' failed                                                     #> ---                                                                              #> Exit status: 2                                                                   #> Stderr:                                                                          #> ls: cannot access '/not-this': No such file or directory"},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"inspecting-the-stack-traces","dir":"Articles","previous_headings":"Debugging","what":"Inspecting the stack traces","title":"Persistent External R Sessions","text":"Another way inspect stack trace subprocess set callr.traceback option TRUE call $traceback() method error. option default, stack trace sometimes contains large objects, take lot time copy processes.","code":"options(callr.traceback = TRUE) rs <- r_session$new() fun <- function() {   options(warn = 2)         # convert warnings to errors   f1 <- function() f2()   f2 <- function() f3()   f3 <- function() {     vec <- 1:2     if (vec) \"success\"   }   f1() } rs$run(fun) #> Error:                                                                           #> ! in callr subprocess.                                                           #> Caused by error in `if (vec) \"success\"`:                                         #> ! the condition has length > 1                                                   #> Type .Last.error to see the more details. rs$traceback() #> 3: f3() at #4                                                                    #> 2: f2() at #3                                                                    #> 1: f1()"},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"inspecting-frames-of-a-stack-trace","dir":"Articles","previous_headings":"Debugging","what":"Inspecting frames of a stack trace","title":"Persistent External R Sessions","text":"callr.traceback option TRUE, callr saves full trace, including frames. can inspect frames $debug() method. can use debug previous error:","code":""},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"interactive-debugging","dir":"Articles","previous_headings":"Debugging","what":"Interactive debugging","title":"Persistent External R Sessions","text":"can use $attach method start REPL (read-eval-print loop) runs subprocess. best subprocess idle, otherwise probably responsive. Press CTRL+C ESC, type .q press ENTER quit REPL. example:  experimental feature always print output properly, e.g. sometimes need press ENTER twice, nevertheless can useful times.","code":"rs <- r_session$new() rs$run(function() { .GlobalEnv$data <- mtcars; NULL }) #> NULL"},{"path":"https://callr.r-lib.org/dev/articles/r-session.html","id":"communication-protocol","dir":"Articles","previous_headings":"","what":"Communication protocol","title":"Persistent External R Sessions","text":"$read() method can return messages following codes: 200: function done. Note result might still error, need check error entry NULL. 201: R process ready use. first message get successful non-blocking startup. 202: attach done. used internally $attach() method, see section debugging . 301: message subprocess. E.g. cli package can generate messages, see cli documentation. 500: R session exited cleanly. means evaluated expression quit R. 501: R session crashed killed. 502: R session closed end connection callr uses communication. might also happen killed crashed.","code":""},{"path":"https://callr.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gábor Csárdi. Author, maintainer, copyright holder. Winston Chang. Author. . Copyright holder, funder. Ascent Digital Services. Copyright holder, funder.","code":""},{"path":"https://callr.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csárdi G, Chang W (2025). callr: Call R R. R package version 3.7.6.9000, https://github.com/r-lib/callr, https://callr.r-lib.org.","code":"@Manual{,   title = {callr: Call R from R},   author = {Gábor Csárdi and Winston Chang},   year = {2025},   note = {R package version 3.7.6.9000, https://github.com/r-lib/callr},   url = {https://callr.r-lib.org}, }"},{"path":"https://callr.r-lib.org/dev/index.html","id":"callr","dir":"","previous_headings":"","what":"Call R from R","title":"Call R from R","text":"Call R R sometimes useful perform computation separate R process, without affecting current R process . packages exactly . Features Installation Passing arguments Using packages Error handling Standard output error Background R processes Multiple background R processes poll() Persistent R sessions Running R CMD commands Environment variables Code Conduct","code":""},{"path":"https://callr.r-lib.org/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Call R from R","text":"Calls R function, arguments, subprocess. Copies function arguments subprocess copies return value function back, seamlessly. Copies error objects back subprocess, including stack trace. Shows /collects standard output standard error subprocess. Supports one-persistent R subprocesses. Calls function synchronously asynchronously (background). Can call R CMD commands, synchronously asynchronously. Can call R scripts, synchronously asynchronously. Provides extensible r_process, rcmd_process rscript_process R6 classes, based processx::process.","code":""},{"path":"https://callr.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Call R from R","text":"Install stable version CRAN: Install development version GitHub:","code":"install.packages(\"callr\") pak::pak(\"r-lib/callr\")"},{"path":"https://callr.r-lib.org/dev/index.html","id":"synchronous-one-off-r-processes","dir":"","previous_headings":"","what":"Synchronous, one-off R processes","title":"Call R from R","text":"Use r() run R function new R process. results passed back seamlessly:","code":"callr::r(function() var(iris[, 1:4])) #>              Sepal.Length Sepal.Width Petal.Length Petal.Width #> Sepal.Length    0.6856935  -0.0424340    1.2743154   0.5162707 #> Sepal.Width    -0.0424340   0.1899794   -0.3296564  -0.1216394 #> Petal.Length    1.2743154  -0.3296564    3.1162779   1.2956094 #> Petal.Width     0.5162707  -0.1216394    1.2956094   0.5810063"},{"path":"https://callr.r-lib.org/dev/index.html","id":"passing-arguments","dir":"","previous_headings":"Synchronous, one-off R processes","what":"Passing arguments","title":"Call R from R","text":"can pass arguments function setting args list arguments. often necessary arguments explicitly copied child process, whereas evaluated function refer variables parent. example, following work: : Note arguments serialized saved file, large R objects, might take long time child process start .","code":"mycars <- cars callr::r(function() summary(mycars)) #> Error: #> ! in callr subprocess. #> Caused by error in `(function () …`: #> ! object 'mycars' not found #> Type .Last.error to see the more details. mycars <- cars callr::r(function(x) summary(x), args = list(mycars)) #>      speed           dist #>  Min.   : 4.0   Min.   :  2.00 #>  1st Qu.:12.0   1st Qu.: 26.00 #>  Median :15.0   Median : 36.00 #>  Mean   :15.4   Mean   : 42.98 #>  3rd Qu.:19.0   3rd Qu.: 56.00 #>  Max.   :25.0   Max.   :120.00"},{"path":"https://callr.r-lib.org/dev/index.html","id":"using-packages","dir":"","previous_headings":"Synchronous, one-off R processes","what":"Using packages","title":"Call R from R","text":"can use R package child process, just make sure refer explicitly :: operator. example, following code creates igraph graph child, calculates metrics .","code":"callr::r(function() { g <- igraph::sample_gnp(1000, 4/1000); igraph::diameter(g) }) #> [1] 11"},{"path":"https://callr.r-lib.org/dev/index.html","id":"error-handling","dir":"","previous_headings":"Synchronous, one-off R processes","what":"Error handling","title":"Call R from R","text":"callr copies errors child process back main R session: callr sets .Last.error variable, error can inspect details error, including stack traces main R process subprocess. error objects two parts. first belongs main process, second belongs subprocess. .Last.error also includes stack trace, includes main R process subprocess: top part trace contains frames main process, bottom part contains frames subprocess, starting anonymous function.","code":"callr::r(function() 1 + \"A\") #> Error: #> ! in callr subprocess. #> Caused by error in `1 + \"A\"`: #> ! non-numeric argument to binary operator #> Type .Last.error to see the more details. .Last.error #> Error: #> ! in callr subprocess. #> Caused by error in `1 + \"A\"`: #> ! non-numeric argument to binary operator #> --- #> Backtrace: #> 1. callr::r(function() 1 + \"A\") #> 2. callr:::get_result(output = out, options) #> 3. callr:::throw(callr_remote_error(remerr, output), parent = fix_msg(remerr[[3] #> ])) #> --- #> Subprocess backtrace: #> 1. base::.handleSimpleError(function (e) … #> 2. global h(simpleError(msg, call))"},{"path":"https://callr.r-lib.org/dev/index.html","id":"standard-output-and-error","dir":"","previous_headings":"Synchronous, one-off R processes","what":"Standard output and error","title":"Call R from R","text":"default, standard output error child lost, can request callr redirect files, inspect files parent: stdout option, standard output collected can examined child process finished. show = TRUE options also show output child, printed, console parent.","code":"x <- callr::r(function() { print(\"hello world!\"); message(\"hello again!\") },   stdout = \"/tmp/out\", stderr = \"/tmp/err\" ) readLines(\"/tmp/out\") #> [1] \"[1] \\\"hello world!\\\"\" readLines(\"/tmp/err\") #> [1] \"hello again!\""},{"path":"https://callr.r-lib.org/dev/index.html","id":"background-r-processes","dir":"","previous_headings":"","what":"Background R processes","title":"Call R from R","text":"r_bg() similar r() starts R process background. returns r_process R6 object, provides rich API: list r_process methods: include methods processx::process superclass new get_result() method, retrieve R object returned function call. handiest methods : get_exit_status() query exit status finished process. get_result() collect return value R function call. interrupt() send interrupt process. equivalent CTRL+C key press, R process might ignore . is_alive() check process alive. kill() terminate process. poll_io() wait standard output, standard error, completion process, timeout. read_*() read standard output error. suspend() resume() stop continue process. wait() wait completion process, timeout.","code":"rp <- callr::r_bg(function() Sys.sleep(.2)) rp #> PROCESS 'R', running, pid 8731. ls(rp) #>  [1] \"as_ps_handle\"          \"clone\"                 \"finalize\" #>  [4] \"format\"                \"get_cmdline\"           \"get_cpu_times\" #>  [7] \"get_error_connection\"  \"get_error_file\"        \"get_exe\" #> [10] \"get_exit_status\"       \"get_input_connection\"  \"get_input_file\" #> [13] \"get_memory_info\"       \"get_name\"              \"get_output_connection\" #> [16] \"get_output_file\"       \"get_pid\"               \"get_poll_connection\" #> [19] \"get_result\"            \"get_start_time\"        \"get_status\" #> [22] \"get_username\"          \"get_wd\"                \"has_error_connection\" #> [25] \"has_input_connection\"  \"has_output_connection\" \"has_poll_connection\" #> [28] \"initialize\"            \"interrupt\"             \"is_alive\" #> [31] \"is_incomplete_error\"   \"is_incomplete_output\"  \"is_supervised\" #> [34] \"kill\"                  \"kill_tree\"             \"poll_io\" #> [37] \"print\"                 \"read_all_error\"        \"read_all_error_lines\" #> [40] \"read_all_output\"       \"read_all_output_lines\" \"read_error\" #> [43] \"read_error_lines\"      \"read_output\"           \"read_output_lines\" #> [46] \"resume\"                \"signal\"                \"supervise\" #> [49] \"suspend\"               \"wait\"                  \"write_input\""},{"path":"https://callr.r-lib.org/dev/index.html","id":"multiple-background-r-processes-and-poll","dir":"","previous_headings":"","what":"Multiple background R processes and poll()","title":"Call R from R","text":"Multiple background R processes best managed processx::poll() function waits events (standard output/error termination) multiple processes. returns soon one process generated event, timeout expired. timeout milliseconds.","code":"rp1 <- callr::r_bg(function() { Sys.sleep(1/2); \"1 done\" }) rp2 <- callr::r_bg(function() { Sys.sleep(1/1000); \"2 done\" }) processx::poll(list(rp1, rp2), 1000) #> [[1]] #>   output    error  process #> \"silent\" \"silent\" \"silent\" #> #> [[2]] #>  output   error process #> \"ready\" \"ready\" \"ready\" #> rp2$get_result() #> [1] \"2 done\" processx::poll(list(rp1), 1000) #> [[1]] #>   output    error  process #> \"silent\"  \"ready\"  \"ready\" #> rp1$get_result() #> [1] \"1 done\""},{"path":"https://callr.r-lib.org/dev/index.html","id":"persistent-r-sessions","dir":"","previous_headings":"","what":"Persistent R sessions","title":"Call R from R","text":"r_session another processx::process subclass represents persistent background R session: r_session$run() synchronous call, works similarly r(), uses persistent session. r_session$call() starts function call returns immediately. r_session$poll_process() method processx::poll() can used wait completion events one R sessions, R processes processx::process objects. R session done asynchronous computation, poll_process() method returns \"ready\" r_session$read() method can read result.","code":"rs <- callr::r_session$new() rs #> R SESSION, alive, idle, pid 8782. rs <- callr::r_session$new() rs$run(function() runif(10)) #>  [1] 0.04021631 0.38370264 0.67796191 0.07753741 0.41093762 0.95719723 #>  [7] 0.26413457 0.04059901 0.85678730 0.42025877 rs$call(function() rnorm(10)) rs #> R SESSION, alive, busy, pid 8791. rs$poll_process(2000) #> [1] \"ready\" rs$read() #> $code #> [1] 200 #> #> $message #> [1] \"done callr-rs-result-21ab4af768a1\" #> #> $result #>  [1]  0.7997932  1.9498024 -0.7961900 -0.3088585  0.7601470  0.7138890 #>  [7]  0.7230204  2.1043616  0.8067932 -1.5642467 #> #> $stdout #> [1] \"\" #> #> $stderr #> [1] \"\" #> #> $error #> NULL #> #> attr(,\"class\") #> [1] \"callr_session_result\""},{"path":"https://callr.r-lib.org/dev/index.html","id":"running-r-cmd-commands","dir":"","previous_headings":"","what":"Running R CMD commands","title":"Call R from R","text":"rcmd() function calls R CMD command. example, can call R CMD INSTALL, R CMD check R CMD config way: returns list three components: standard output, standard error, exit (status) code R CMD command.","code":"callr::rcmd(\"config\", \"CC\") #> $status #> [1] 0 #> #> $stdout #> [1] \"gcc\\n\" #> #> $stderr #> [1] \"\" #> #> $timeout #> [1] FALSE #> #> $command #> [1] \"/opt/R/4.4.2/lib/R/bin/R\" \"CMD\" #> [3] \"config\"                   \"CC\" #>"},{"path":[]},{"path":"https://callr.r-lib.org/dev/index.html","id":"environment-variables","dir":"","previous_headings":"Configuration","what":"Environment variables","title":"Call R from R","text":"CALLR_NO_TEMP_DLLS: true, callr use temporary directory copy client DLL files , subprocess. default callr copies DLL file drives callr subprocess temporary directory loads . mainly avoid locking DLL file package library, Windows. default causes issues , set true, callr use DLL file installed processx package. See also https://github.com/r-lib/callr/issues/273.","code":""},{"path":"https://callr.r-lib.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Call R from R","text":"Please note callr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://callr.r-lib.org/dev/reference/add_hook.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a user hook to be executed before launching an R subprocess — add_hook","title":"Add a user hook to be executed before launching an R subprocess — add_hook","text":"function allows users callr specify functions get invoked whenever R session launched. function can modify environment variables command line arguments.","code":""},{"path":"https://callr.r-lib.org/dev/reference/add_hook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a user hook to be executed before launching an R subprocess — add_hook","text":"","code":"add_hook(...)"},{"path":"https://callr.r-lib.org/dev/reference/add_hook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a user hook to be executed before launching an R subprocess — add_hook","text":"... Named argument specifying hook function add, NULL delete named hook.","code":""},{"path":"https://callr.r-lib.org/dev/reference/add_hook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a user hook to be executed before launching an R subprocess — add_hook","text":"add_hook called side-effects.","code":""},{"path":"https://callr.r-lib.org/dev/reference/add_hook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a user hook to be executed before launching an R subprocess — add_hook","text":"prototype hook function function (options), expected return modified options.","code":""},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Call R from R — callr-package","title":"Call R from R — callr-package","text":"sometimes useful perform computation separate R process, without affecting current R process .  packages exactly .","code":""},{"path":[]},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"features","dir":"Reference","previous_headings":"","what":"Features","title":"Call R from R — callr-package","text":"Calls R function, arguments, subprocess. Copies function arguments subprocess copies return value function back, seamlessly. Copies error objects back subprocess, including stack trace. Shows /collects standard output standard error subprocess. Supports one-persistent R subprocesses. Calls function synchronously asynchronously (background). Can call R CMD commands, synchronously asynchronously. Can call R scripts, synchronously asynchronously. Provides extensible r_process, rcmd_process rscript_process R6 classes, based processx::process.","code":""},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"installation","dir":"Reference","previous_headings":"","what":"Installation","title":"Call R from R — callr-package","text":"Install stable version CRAN:   Install development version GitHub:","code":"install.packages(\"callr\") pak::pak(\"r-lib/callr\")"},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"synchronous-one-off-r-processes","dir":"Reference","previous_headings":"","what":"Synchronous, one-off R processes","title":"Call R from R — callr-package","text":"Use r() run R function new R process. results passed back seamlessly:","code":"callr::r(function() var(iris[, 1:4])) #>              Sepal.Length Sepal.Width Petal.Length Petal.Width #> Sepal.Length    0.6856935  -0.0424340    1.2743154   0.5162707 #> Sepal.Width    -0.0424340   0.1899794   -0.3296564  -0.1216394 #> Petal.Length    1.2743154  -0.3296564    3.1162779   1.2956094 #> Petal.Width     0.5162707  -0.1216394    1.2956094   0.5810063"},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"passing-arguments","dir":"Reference","previous_headings":"","what":"Passing arguments","title":"Call R from R — callr-package","text":"can pass arguments function setting args list arguments. often necessary arguments explicitly copied child process, whereas evaluated function refer variables parent. example, following work:   :   Note arguments serialized saved file, large R objects, might take long time child process start .","code":"mycars <- cars callr::r(function() summary(mycars)) #> Error: #> ! in callr subprocess. #> Caused by error in `summary(mycars)`: #> ! object 'mycars' not found #> Type .Last.error to see the more details. mycars <- cars callr::r(function(x) summary(x), args = list(mycars)) #>      speed           dist #>  Min.   : 4.0   Min.   :  2.00 #>  1st Qu.:12.0   1st Qu.: 26.00 #>  Median :15.0   Median : 36.00 #>  Mean   :15.4   Mean   : 42.98 #>  3rd Qu.:19.0   3rd Qu.: 56.00 #>  Max.   :25.0   Max.   :120.00"},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"using-packages","dir":"Reference","previous_headings":"","what":"Using packages","title":"Call R from R — callr-package","text":"can use R package child process, just make sure refer explicitly :: operator. example, following code creates igraph graph child, calculates metrics .","code":"callr::r(function() { g <- igraph::sample_gnp(1000, 4/1000); igraph::diameter(g) }) #> [1] 11"},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Call R from R — callr-package","text":"callr copies errors child process back main R session:     error objects two parts. first belongs main process, second belongs subprocess. .Last.error also includes stack trace, includes main R process subprocess: top part trace contains frames main process, bottom part contains frames subprocess, starting anonymous function.","code":"callr::r(function() 1 + \"A\") #> Error: #> ! in callr subprocess. #> Caused by error in `1 + \"A\"`: #> ! non-numeric argument to binary operator #> Type .Last.error to see the more details. .Last.error #> Error: #> ! in callr subprocess. #> Caused by error in `1 + \"A\"`: #> ! non-numeric argument to binary operator #> --- #> Backtrace: #> 1. callr::r(function() 1 + \"A\") #> 2. callr:::get_result(output = out, options) #> 3. callr:::throw(callr_remote_error(remerr, output), parent = fix_msg(remerr[[3] #> ])) #> --- #> Subprocess backtrace: #> 1. base::.handleSimpleError(function (e) … #> 2. global h(simpleError(msg, call))"},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"standard-output-and-error","dir":"Reference","previous_headings":"","what":"Standard output and error","title":"Call R from R — callr-package","text":"default, standard output error child lost, can request callr redirect files, inspect files parent:     stdout option, standard output collected can examined child process finished. show = TRUE options also show output child, printed, console parent.","code":"x <- callr::r(function() { print(\"hello world!\"); message(\"hello again!\") },   stdout = \"/tmp/out\", stderr = \"/tmp/err\" ) readLines(\"/tmp/out\") #> [1] \"[1] \\\"hello world!\\\"\" readLines(\"/tmp/err\") #> [1] \"hello again!\""},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"background-r-processes","dir":"Reference","previous_headings":"","what":"Background R processes","title":"Call R from R — callr-package","text":"r_bg() similar r() starts R process background. returns r_process R6 object, provides rich API:   list r_process methods:   include methods processx::process superclass new get_result() method, retrieve R object returned function call. handiest methods : get_exit_status() query exit status finished process. get_result() collect return value R function call. interrupt() send interrupt process. equivalent CTRL+C key press, R process might ignore . is_alive() check process alive. kill() terminate process. poll_io() wait standard output, standard error, completion process, timeout. read_*() read standard output error. suspend() resume() stop continue process. wait() wait completion process, timeout.","code":"rp <- callr::r_bg(function() Sys.sleep(.2)) rp #> PROCESS 'R', running, pid 58242. ls(rp) #>  [1] \"as_ps_handle\"          \"clone\"                 \"finalize\" #>  [4] \"format\"                \"get_cmdline\"           \"get_cpu_times\" #>  [7] \"get_error_connection\"  \"get_error_file\"        \"get_exe\" #> [10] \"get_exit_status\"       \"get_input_connection\"  \"get_input_file\" #> [13] \"get_memory_info\"       \"get_name\"              \"get_output_connection\" #> [16] \"get_output_file\"       \"get_pid\"               \"get_poll_connection\" #> [19] \"get_result\"            \"get_start_time\"        \"get_status\" #> [22] \"get_username\"          \"get_wd\"                \"has_error_connection\" #> [25] \"has_input_connection\"  \"has_output_connection\" \"has_poll_connection\" #> [28] \"initialize\"            \"interrupt\"             \"is_alive\" #> [31] \"is_incomplete_error\"   \"is_incomplete_output\"  \"is_supervised\" #> [34] \"kill\"                  \"kill_tree\"             \"poll_io\" #> [37] \"print\"                 \"read_all_error\"        \"read_all_error_lines\" #> [40] \"read_all_output\"       \"read_all_output_lines\" \"read_error\" #> [43] \"read_error_lines\"      \"read_output\"           \"read_output_lines\" #> [46] \"resume\"                \"signal\"                \"supervise\" #> [49] \"suspend\"               \"wait\"                  \"write_input\""},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"multiple-background-r-processes-and-poll-","dir":"Reference","previous_headings":"","what":"Multiple background R processes and poll()","title":"Call R from R — callr-package","text":"Multiple background R processes best managed processx::poll() function waits events (standard output/error termination) multiple processes. returns soon one process generated event, timeout expired. timeout milliseconds.","code":"rp1 <- callr::r_bg(function() { Sys.sleep(1/2); \"1 done\" }) rp2 <- callr::r_bg(function() { Sys.sleep(1/1000); \"2 done\" }) processx::poll(list(rp1, rp2), 1000) #> [[1]] #>   output    error  process #> \"silent\" \"silent\" \"silent\" #> #> [[2]] #>  output   error process #> \"ready\" \"ready\" \"ready\" #> rp2$get_result() #> [1] \"2 done\" processx::poll(list(rp1), 1000) #> [[1]] #>   output    error  process #> \"silent\" \"silent\"  \"ready\" #> rp1$get_result() #> [1] \"1 done\""},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"persistent-r-sessions","dir":"Reference","previous_headings":"","what":"Persistent R sessions","title":"Call R from R — callr-package","text":"r_session another processx::process subclass represents persistent background R session:   r_session$run() synchronous call, works similarly r(), uses persistent session. r_session$call() starts function call returns immediately. r_session$poll_process() method processx::poll() can used wait completion events one R sessions, R processes processx::process objects. R session done asynchronous computation, poll_process() method returns \"ready\" r_session$read() method can read result.","code":"rs <- callr::r_session$new() rs #> R SESSION, alive, idle, pid 58288. rs <- callr::r_session$new() rs$run(function() runif(10)) #>  [1] 0.8047354 0.8938617 0.7142338 0.8505395 0.3118376 0.7083882 0.9514367 #>  [8] 0.2536755 0.6727270 0.3359578 rs$call(function() rnorm(10)) rs #> R SESSION, alive, busy, pid 58294. rs$poll_process(2000) #> [1] \"ready\" rs$read() #> $code #> [1] 200 #> #> $message #> [1] \"done callr-rs-result-e3324ebebc8b\" #> #> $result #>  [1] -0.60962697 -0.41063130  0.22121432  1.44621900  0.26890394  0.11432756 #>  [7] -0.53206118  0.47493933  0.02069551  1.37348004 #> #> $stdout #> [1] \"\" #> #> $stderr #> [1] \"\" #> #> $error #> NULL #> #> attr(,\"class\") #> [1] \"callr_session_result\""},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"running-r-cmd-commands","dir":"Reference","previous_headings":"","what":"Running R CMD commands","title":"Call R from R — callr-package","text":"rcmd() function calls R CMD command. example, can call R CMD INSTALL, R CMD check R CMD config way:   returns list three components: standard output, standard error, exit (status) code R CMD command.","code":"callr::rcmd(\"config\", \"CC\") #> $status #> [1] 0 #> #> $stdout #> [1] \"clang -arch arm64\\n\" #> #> $stderr #> [1] \"\" #> #> $timeout #> [1] FALSE #> #> $command #> [1] \"/Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/bin/R\" #> [2] \"CMD\" #> [3] \"config\" #> [4] \"CC\" #>"},{"path":[]},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"environment-variables","dir":"Reference","previous_headings":"","what":"Environment variables","title":"Call R from R — callr-package","text":"CALLR_NO_TEMP_DLLS: true, callr use temporary directory copy client DLL files , subprocess. default callr copies DLL file drives callr subprocess temporary directory loads . mainly avoid locking DLL file package library, Windows. default causes issues , set true, callr use DLL file installed processx package. See also https://github.com/r-lib/callr/issues/273.","code":""},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"code-of-conduct","dir":"Reference","previous_headings":"","what":"Code of Conduct","title":"Call R from R — callr-package","text":"Please note callr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":"https://callr.r-lib.org/dev/reference/callr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Call R from R — callr-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com (ORCID) [copyright holder] Authors: Winston Chang contributors: Posit Software, PBC [copyright holder, funder] Ascent Digital Services [copyright holder, funder]","code":""},{"path":"https://callr.r-lib.org/dev/reference/convert_and_check_my_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert and check function arguments — convert_and_check_my_args","title":"Convert and check function arguments — convert_and_check_my_args","text":"function used variants r rcmd. argument name used refer one kind object, make possible.","code":""},{"path":"https://callr.r-lib.org/dev/reference/convert_and_check_my_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert and check function arguments — convert_and_check_my_args","text":"","code":"convert_and_check_my_args(options)"},{"path":"https://callr.r-lib.org/dev/reference/convert_and_check_my_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert and check function arguments — convert_and_check_my_args","text":"options List options.","code":""},{"path":"https://callr.r-lib.org/dev/reference/convert_and_check_my_args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert and check function arguments — convert_and_check_my_args","text":"benefit single options object avoid passing around lot arguments time. benefit making object internal (.e. r, etc. functions multiple arguments instead single options list), documentation usage user friendly (e.g. command- completion works editor.","code":""},{"path":"https://callr.r-lib.org/dev/reference/default_repos.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for the repos option in callr subprocesses — default_repos","title":"Default value for the repos option in callr subprocesses — default_repos","text":"callr sets repos option subprocesses, make sure CRAN mirror set . subprocess bring menu CRAN mirrors user choose .","code":""},{"path":"https://callr.r-lib.org/dev/reference/default_repos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for the repos option in callr subprocesses — default_repos","text":"","code":"default_repos()"},{"path":"https://callr.r-lib.org/dev/reference/default_repos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default value for the repos option in callr subprocesses — default_repos","text":"Named character vector, default value repos option callr subprocesses.","code":""},{"path":"https://callr.r-lib.org/dev/reference/default_repos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default value for the repos option in callr subprocesses — default_repos","text":"","code":"default_repos() #>                                                          RSPM  #> \"https://packagemanager.posit.co/cran/__linux__/noble/latest\"  #>                                                          CRAN  #>                                    \"https://cran.rstudio.com\""},{"path":"https://callr.r-lib.org/dev/reference/get_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the result object from the output file, or the error — get_result","title":"Read the result object from the output file, or the error — get_result","text":"Even error happens, output file might still exist, saveRDS() creates file evaluating object argument. need check error file decide error happened.","code":""},{"path":"https://callr.r-lib.org/dev/reference/get_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the result object from the output file, or the error — get_result","text":"","code":"get_result(output, options)"},{"path":"https://callr.r-lib.org/dev/reference/get_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the result object from the output file, or the error — get_result","text":"output List output object run() name result file read. error file, .error appended . options context, including parameters.","code":""},{"path":"https://callr.r-lib.org/dev/reference/get_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the result object from the output file, or the error — get_result","text":"error happened, result returned. Otherwise handle error.","code":""},{"path":"https://callr.r-lib.org/dev/reference/new_callr_crash_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an error object — new_callr_crash_error","title":"Create an error object — new_callr_crash_error","text":"two kinds errors, class callr_error: first one thrown timeout: callr_timeout_error. second one thrown R error (session): callr_status_error.","code":""},{"path":"https://callr.r-lib.org/dev/reference/new_callr_crash_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an error object — new_callr_crash_error","text":"","code":"new_callr_crash_error(out, msg = NULL)"},{"path":"https://callr.r-lib.org/dev/reference/new_callr_crash_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an error object — new_callr_crash_error","text":"object returned run(). msg extra message add error message.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an expression in another R session — r","title":"Evaluate an expression in another R session — r","text":"callr version 2.0.0, r() equivalent r_safe(), tries set less error prone execution environment. particular: Ensures least one reasonable CRAN mirror set . Adds command line arguments avoid saving .RData files, etc. Ignores system user profiles (default). Sets various environment variables: CYGWIN avoid warnings DOS-style paths, R_TESTS avoid issues callr invoked unit tests, R_BROWSER R_PDFVIEWER avoid starting browser PDF viewer. See rcmd_safe_env().","code":""},{"path":"https://callr.r-lib.org/dev/reference/r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an expression in another R session — r","text":"","code":"r(   func,   args = list(),   libpath = .libPaths(),   repos = default_repos(),   stdout = NULL,   stderr = NULL,   poll_connection = TRUE,   error = getOption(\"callr.error\", \"error\"),   cmdargs = c(\"--slave\", \"--no-save\", \"--no-restore\"),   show = FALSE,   callback = NULL,   block_callback = NULL,   spinner = show && interactive(),   system_profile = FALSE,   user_profile = \"project\",   env = rcmd_safe_env(),   timeout = Inf,   package = FALSE,   arch = \"same\",   ... )  r_safe(   func,   args = list(),   libpath = .libPaths(),   repos = default_repos(),   stdout = NULL,   stderr = NULL,   poll_connection = TRUE,   error = getOption(\"callr.error\", \"error\"),   cmdargs = c(\"--slave\", \"--no-save\", \"--no-restore\"),   show = FALSE,   callback = NULL,   block_callback = NULL,   spinner = show && interactive(),   system_profile = FALSE,   user_profile = \"project\",   env = rcmd_safe_env(),   timeout = Inf,   package = FALSE,   arch = \"same\",   ... )"},{"path":"https://callr.r-lib.org/dev/reference/r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an expression in another R session — r","text":"func Function object call new R process. function self-contained refer functions use variables explicitly packages using :: notation. default environment function set .GlobalEnv passing child process. (See package option want keep environment.) , good practice create anonymous function pass callr, instead passing function object (base ) package. particular   work, .libPaths defined special environment,   works just fine. args Arguments pass function. Must list. libpath library path. repos repos option. NULL, repos option set. options used user_profile system_profile set FALSE, set using system user profile. stdout name file standard output child R process written . child process runs --slave option (default), commands echoed shown standard output. Also note need call print() explicitly show output command(s). NULL, standard output returned, recorded included error object error happens. Various special values argument \"|\" explained stdout argument processx::process. stderr name file standard error child R process written . particular message() sends output standard error. nothing sent standard error, file empty. argument can file stdout, case correctly interleaved. string \"2>&1\", standard error redirected standard output. NULL, standard output returned, recorded included error object error happens. Various special values argument \"|\" explained stdout argument processx::process. poll_connection Whether control connection process. used transmit messages subprocess main process. error remote process throws error. See details . cmdargs Command line arguments pass R process. Note c(\"-f\", rscript) appended , rscript name script file run. contains call supplied function error handling code. show Logical, whether show standard output screen child process running. Note independent stdout stderr arguments. standard error shown currently. callback function call line standard output standard error child process. works together show option; .e. show = TRUE, callback provided, output shown screen, callback also called. block_callback function call block standard output standard error. callback line oriented, .e. multiple lines half line can passed callback. spinner Whether show calming spinner screen child R session running. default shown show = TRUE R session interactive. system_profile Whether use system profile file. user_profile Whether use user's profile file. \"project\", profile working directory used, R_PROFILE_USER environment variable user level profile . See also \"Security considerations\" . env Environment variables set child process. timeout Timeout function call finish. can base::difftime object, real number, meaning seconds. process finish timeout period expires, system_command_timeout_error error thrown. Inf means timeout. package Whether keep environment func passing package. Possible values : FALSE: reset environment .GlobalEnv. default. TRUE: keep environment . pkg: set environment pkg package namespace. arch Architecture use child process, multi-arch builds R. default main process. See supported_archs(). contains forward backward slash character, taken path R executable. Note Windows need path Rterm.exe. ... Extra arguments passed processx::run().","code":"r(.libPaths) r(function() .libPaths())"},{"path":"https://callr.r-lib.org/dev/reference/r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate an expression in another R session — r","text":"Value evaluated expression.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate an expression in another R session — r","text":"r() function 2.0.0 called r_copycat() now.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r.html","id":"error-handling","dir":"Reference","previous_headings":"","what":"Error handling","title":"Evaluate an expression in another R session — r","text":"callr handles errors properly. child process throws error, callr throws error error message main process. error expert argument may used specify different behavior error. following values possible: error default behavior: throw error main process, prefix error message subprocess. stack also throws error main process, error special kind, class callr_error, contains original error object, call stack child, written utils::dump.frames(). now deprecated, error thrown \"error\" information. debugger similar stack, addition returning complete call stack, also start debugger child call stack, via utils::debugger(). default error behavior can also set using callr.error option. useful debug code uses callr. callr uses parent errors, keep stacks main process subprocess(es) error object.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"Evaluate an expression in another R session — r","text":"callr makes copy user's .Renviron file potentially local user .Rprofile, session temporary directory. Avoid storing sensitive information passwords, environment file profile, otherwise information get scattered various files, least temporarily, subprocess finishes. can use keyring package avoid passwords plain files.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r.html","id":"transporting-objects","dir":"Reference","previous_headings":"","what":"Transporting objects","title":"Evaluate an expression in another R session — r","text":"func args copied child process first serializing temporary file using saveRDS() loading back child session using readRDS(). strategy used copy result calling func(args) main session. Note objects, notably externalptr type, work expected saved file loaded back. performance reasons compress=FALSE used serializing saveRDS(), can disabled setting options(callr.compress_transport = TRUE).","code":""},{"path":[]},{"path":"https://callr.r-lib.org/dev/reference/r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate an expression in another R session — r","text":"","code":"if (FALSE) { # Workspace is empty r(function() ls())  # library path is the same by default r(function() .libPaths()) .libPaths() }"},{"path":"https://callr.r-lib.org/dev/reference/r_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate an expression in another R session, in the background — r_bg","title":"Evaluate an expression in another R session, in the background — r_bg","text":"Starts evaluating R function call background R process, returns immediately. Use p$get_result() collect result throw error background computation failed.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate an expression in another R session, in the background — r_bg","text":"","code":"r_bg(   func,   args = list(),   libpath = .libPaths(),   repos = default_repos(),   stdout = \"|\",   stderr = \"|\",   poll_connection = TRUE,   error = getOption(\"callr.error\", \"error\"),   cmdargs = c(\"--slave\", \"--no-save\", \"--no-restore\"),   system_profile = FALSE,   user_profile = \"project\",   env = rcmd_safe_env(),   supervise = FALSE,   package = FALSE,   arch = \"same\",   ... )"},{"path":"https://callr.r-lib.org/dev/reference/r_bg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate an expression in another R session, in the background — r_bg","text":"func Function object call new R process. function self-contained refer functions use variables explicitly packages using :: notation. default environment function set .GlobalEnv passing child process. (See package option want keep environment.) , good practice create anonymous function pass callr, instead passing function object (base ) package. particular   work, .libPaths defined special environment,   works just fine. args Arguments pass function. Must list. libpath library path. repos repos option. NULL, repos option set. options used user_profile system_profile set FALSE, set using system user profile. stdout name file standard output child R process written . child process runs --slave option (default), commands echoed shown standard output. Also note need call print() explicitly show output command(s). NULL, standard output returned, recorded included error object error happens. Various special values argument \"|\" explained stdout argument processx::process. stderr name file standard error child R process written . particular message() sends output standard error. nothing sent standard error, file empty. argument can file stdout, case correctly interleaved. string \"2>&1\", standard error redirected standard output. NULL, standard output returned, recorded included error object error happens. Various special values argument \"|\" explained stdout argument processx::process. poll_connection Whether control connection process. used transmit messages subprocess main process. error remote process throws error. See details . cmdargs Command line arguments pass R process. Note c(\"-f\", rscript) appended , rscript name script file run. contains call supplied function error handling code. system_profile Whether use system profile file. user_profile Whether use user's profile file. \"project\", profile working directory used, R_PROFILE_USER environment variable user level profile . See also \"Security considerations\" . env Environment variables set child process. supervise Whether register process supervisor. TRUE, supervisor ensure process killed R process exits. package Whether keep environment func passing package. Possible values : FALSE: reset environment .GlobalEnv. default. TRUE: keep environment . pkg: set environment pkg package namespace. arch Architecture use child process, multi-arch builds R. default main process. See supported_archs(). contains forward backward slash character, taken path R executable. Note Windows need path Rterm.exe. ... Extra arguments passed processx::process constructor.","code":"r(.libPaths) r(function() .libPaths())"},{"path":"https://callr.r-lib.org/dev/reference/r_bg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate an expression in another R session, in the background — r_bg","text":"r_process object, inherits process, process methods can called , addition also get_result() method collect result.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_bg.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"Evaluate an expression in another R session, in the background — r_bg","text":"callr makes copy user's .Renviron file potentially local user .Rprofile, session temporary directory. Avoid storing sensitive information passwords, environment file profile, otherwise information get scattered various files, least temporarily, subprocess finishes. can use keyring package avoid passwords plain files.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_bg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate an expression in another R session, in the background — r_bg","text":"","code":"if (FALSE) { rx <- r_bg(function() 1 + 2)  # wait until it is done rx$wait() rx$is_alive() rx$get_result() }"},{"path":"https://callr.r-lib.org/dev/reference/r_copycat.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an R process that mimics the current R process — r_copycat","title":"Run an R process that mimics the current R process — r_copycat","text":"Differences r(): extra repositories set . ---save, ---restore command line arguments used. (--slave still .) system profile user profile loaded. extra environment variables set .","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_copycat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an R process that mimics the current R process — r_copycat","text":"","code":"r_copycat(   func,   args = list(),   libpath = .libPaths(),   repos = getOption(\"repos\"),   cmdargs = \"--slave\",   system_profile = TRUE,   user_profile = TRUE,   env = character(),   ... )"},{"path":"https://callr.r-lib.org/dev/reference/r_copycat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an R process that mimics the current R process — r_copycat","text":"func Function object call new R process. function self-contained refer functions use variables explicitly packages using :: notation. default environment function set .GlobalEnv passing child process. (See package option want keep environment.) , good practice create anonymous function pass callr, instead passing function object (base ) package. particular   work, .libPaths defined special environment,   works just fine. args Arguments pass function. Must list. libpath library path. repos repos option. NULL, repos option set. options used user_profile system_profile set FALSE, set using system user profile. cmdargs Command line arguments pass R process. Note c(\"-f\", rscript) appended , rscript name script file run. contains call supplied function error handling code. system_profile Whether use system profile file. user_profile Whether use user's profile file. \"project\", profile working directory used, R_PROFILE_USER environment variable user level profile . See also \"Security considerations\" . env Environment variables set child process. ... Additional arguments passed r().","code":"r(.libPaths) r(function() .libPaths())"},{"path":"https://callr.r-lib.org/dev/reference/r_copycat.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"Run an R process that mimics the current R process — r_copycat","text":"callr makes copy user's .Renviron file potentially local user .Rprofile, session temporary directory. Avoid storing sensitive information passwords, environment file profile, otherwise information get scattered various files, least temporarily, subprocess finishes. can use keyring package avoid passwords plain files.","code":""},{"path":[]},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":null,"dir":"Reference","previous_headings":"","what":"External R Process — r_process","title":"External R Process — r_process","text":"R process runs background. R6 class extends processx::process class. process starts background, evaluates R function call, quits.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"External R Process — r_process","text":"processx::process -> r_process","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"External R Process — r_process","text":"processx::process$as_ps_handle() processx::process$finalize() processx::process$format() processx::process$get_cmdline() processx::process$get_cpu_times() processx::process$get_error_connection() processx::process$get_error_file() processx::process$get_exe() processx::process$get_exit_status() processx::process$get_input_connection() processx::process$get_input_file() processx::process$get_memory_info() processx::process$get_name() processx::process$get_output_connection() processx::process$get_output_file() processx::process$get_pid() processx::process$get_poll_connection() processx::process$get_start_time() processx::process$get_status() processx::process$get_username() processx::process$get_wd() processx::process$has_error_connection() processx::process$has_input_connection() processx::process$has_output_connection() processx::process$has_poll_connection() processx::process$interrupt() processx::process$is_alive() processx::process$is_incomplete_error() processx::process$is_incomplete_output() processx::process$is_supervised() processx::process$kill() processx::process$kill_tree() processx::process$poll_io() processx::process$print() processx::process$read_all_error() processx::process$read_all_error_lines() processx::process$read_all_output() processx::process$read_all_output_lines() processx::process$read_error() processx::process$read_error_lines() processx::process$read_output() processx::process$read_output_lines() processx::process$resume() processx::process$signal() processx::process$supervise() processx::process$suspend() processx::process$wait() processx::process$write_input()","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"External R Process — r_process","text":"r_process$new() r_process$get_result() r_process$clone()","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"External R Process — r_process","text":"Start new R process background.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Process — r_process","text":"","code":"r_process$new(options)"},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Process — r_process","text":"options list options created via r_process_options().","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Process — r_process","text":"new r_process object.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"method-get-result-","dir":"Reference","previous_headings":"","what":"Method get_result()","title":"External R Process — r_process","text":"Return result, R object, finished background R process. process finished yet, throws error. (can use wait() method (see processx::process) wait process finish, optionally timeout.) can also use processx::poll() wait end process, together processes events.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Process — r_process","text":"","code":"r_process$get_result()"},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Process — r_process","text":"return value R expression evaluated R process.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"External R Process — r_process","text":"objects class cloneable method.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Process — r_process","text":"","code":"r_process$clone(deep = FALSE)"},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Process — r_process","text":"deep Whether make deep clone.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"External R Process — r_process","text":"","code":"if (FALSE) { ## List all options and their default values: r_process_options()  ## Start an R process in the background, wait for it, get result opts <- r_process_options(func = function() 1 + 1) rp <- r_process$new(opts) rp$wait() rp$get_result() }"},{"path":"https://callr.r-lib.org/dev/reference/r_process_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create options for an r_process object — r_process_options","title":"Create options for an r_process object — r_process_options","text":"Create options r_process object","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create options for an r_process object — r_process_options","text":"","code":"r_process_options(...)"},{"path":"https://callr.r-lib.org/dev/reference/r_process_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create options for an r_process object — r_process_options","text":"... Options override, named arguments.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create options for an r_process object — r_process_options","text":"list options. r_process_options() creates set options initialize new object r_process class. arguments must named, names used option names. options correspond () arguments r() function. least func option must specified, R function run background.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_process_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create options for an r_process object — r_process_options","text":"","code":"## List all options and their default values: r_process_options() #> $func #> NULL #>  #> $args #> list() #>  #> $libpath #> [1] \"/home/runner/work/_temp/Library\" \"/opt/R/4.4.2/lib/R/site-library\" #> [3] \"/opt/R/4.4.2/lib/R/library\"      #>  #> $repos #>                                                          RSPM  #> \"https://packagemanager.posit.co/cran/__linux__/noble/latest\"  #>                                                          CRAN  #>                                    \"https://cran.rstudio.com\"  #>  #> $stdout #> [1] \"|\" #>  #> $stderr #> [1] \"|\" #>  #> $poll_connection #> [1] TRUE #>  #> $error #> [1] \"error\" #>  #> $cmdargs #> [1] \"--slave\"      \"--no-save\"    \"--no-restore\" #>  #> $system_profile #> [1] FALSE #>  #> $user_profile #> [1] \"project\" #>  #> $env #> character(0) #>  #> $supervise #> [1] FALSE #>  #> $load_hook #>  [1] \"{\\n\"                                                                                   #>  [2] \"    while (\\\"tools:callr\\\" %in% search()) detach(\\\"tools:callr\\\")\\n\"                   #>  [3] \"    env <- readRDS(\\\"/tmp/Rtmppyg89B/callr-env-219224e3c119\\\")\\n\"                      #>  [4] \"    do.call(\\\"attach\\\", list(env, pos = length(search()), name = \\\"tools:callr\\\"))\\n\"  #>  [5] \"    data <- env$`__callr_data__`\\n\"                                                    #>  [6] \"    data$pxlib <- data$load_client_lib(data$sofile[[paste0(\\\"arch-\\\", \\n\"              #>  [7] \"        .Platform$r_arch)]], data$pxdir)\\n\"                                            #>  [8] \"    options(error = function() invokeRestart(\\\"abort\\\"))\\n\"                            #>  [9] \"    rm(list = c(\\\"data\\\", \\\"env\\\"))\\n\"                                                 #> [10] \"    lapply(c(\\\"R_ENVIRON\\\", \\\"R_ENVIRON_USER\\\", \\\"R_PROFILE\\\", \\\"R_PROFILE_USER\\\", \\n\" #> [11] \"        \\\"R_LIBS\\\", \\\"R_LIBS_USER\\\", \\\"R_LIBS_SITE\\\"), function(var) {\\n\"              #> [12] \"        bakvar <- paste0(\\\"CALLR_\\\", var, \\\"_BAK\\\")\\n\"                                 #> [13] \"        val <- Sys.getenv(bakvar, NA_character_)\\n\"                                    #> [14] \"        if (!is.na(val)) {\\n\"                                                          #> [15] \"            do.call(\\\"Sys.setenv\\\", structure(list(val), names = var))\\n\"              #> [16] \"        }\\n\"                                                                           #> [17] \"        else {\\n\"                                                                      #> [18] \"            Sys.unsetenv(var)\\n\"                                                       #> [19] \"        }\\n\"                                                                           #> [20] \"        Sys.unsetenv(bakvar)\\n\"                                                        #> [21] \"    })\\n\"                                                                              #> [22] \"    Sys.unsetenv(\\\"CALLR_CHILD_R_LIBS\\\")\\n\"                                            #> [23] \"    Sys.unsetenv(\\\"CALLR_CHILD_R_LIBS_SITE\\\")\\n\"                                       #> [24] \"    Sys.unsetenv(\\\"CALLR_CHILD_R_LIBS_USER\\\")\\n\"                                       #> [25] \"}\\n\"                                                                                   #>  #> $extra #> list() #>  #> $package #> [1] FALSE #>  #> $arch #> [1] \"same\" #>"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":null,"dir":"Reference","previous_headings":"","what":"External R Session — r_session","title":"External R Session — r_session","text":"permanent R session runs background. R6 class extends processx::process class. process started creation object, can used evaluate R function calls, one time.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"External R Session — r_session","text":"processx::process -> r_session","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"External R Session — r_session","text":"status Status codes returned read().","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"External R Session — r_session","text":"processx::process$as_ps_handle() processx::process$finalize() processx::process$format() processx::process$get_cmdline() processx::process$get_cpu_times() processx::process$get_error_connection() processx::process$get_error_file() processx::process$get_exe() processx::process$get_exit_status() processx::process$get_input_connection() processx::process$get_input_file() processx::process$get_memory_info() processx::process$get_name() processx::process$get_output_connection() processx::process$get_output_file() processx::process$get_pid() processx::process$get_poll_connection() processx::process$get_result() processx::process$get_start_time() processx::process$get_status() processx::process$get_username() processx::process$get_wd() processx::process$has_error_connection() processx::process$has_input_connection() processx::process$has_output_connection() processx::process$has_poll_connection() processx::process$interrupt() processx::process$is_alive() processx::process$is_incomplete_error() processx::process$is_incomplete_output() processx::process$is_supervised() processx::process$kill() processx::process$kill_tree() processx::process$poll_io() processx::process$read_all_error() processx::process$read_all_error_lines() processx::process$read_all_output() processx::process$read_all_output_lines() processx::process$read_error() processx::process$read_error_lines() processx::process$read_output() processx::process$read_output_lines() processx::process$resume() processx::process$signal() processx::process$supervise() processx::process$suspend() processx::process$wait() processx::process$write_input()","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"External R Session — r_session","text":"r_session$new() r_session$run() r_session$run_with_output() r_session$call() r_session$poll_process() r_session$get_state() r_session$get_running_time() r_session$read() r_session$close() r_session$traceback() r_session$debug() r_session$attach() r_session$print() r_session$clone()","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"External R Session — r_session","text":"creates new R background process. can wait process start (wait = TRUE), return immediately, .e. process actually ready run. latter case may call poll_process() method make sure ready.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$new(options = r_session_options(), wait = TRUE, wait_timeout = 3000)"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Session — r_session","text":"options list options created via r_session_options(). wait Whether wait R process start ready running commands. wait_timeout Timeout waiting R process start, milliseconds.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Session — r_session","text":"r_session object.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"External R Session — r_session","text":"Similar r(), runs function permanent background R session. throws error function call generated error child process.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$run(func, args = list(), package = FALSE)"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Session — r_session","text":"func Function object call background R process. Please read notes similar argument r(). args Arguments pass function. Must list. package Whether keep environment func passing package. Possible values : FALSE: reset environment .GlobalEnv. default. TRUE: keep environment . pkg: set environment pkg package namespace.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Session — r_session","text":"return value R expression.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-run-with-output-","dir":"Reference","previous_headings":"","what":"Method run_with_output()","title":"External R Session — r_session","text":"Similar $run(), returns standard output error child process well. throw errors, returns non-NULL error member result list.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$run_with_output(func, args = list(), package = FALSE)"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Session — r_session","text":"func Function object call background R process. Please read notes similar argument r(). args Arguments pass function. Must list. package Whether keep environment func passing package. Possible values : FALSE: reset environment .GlobalEnv. default. TRUE: keep environment . pkg: set environment pkg package namespace.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Session — r_session","text":"list following entries. result: value returned func. error NULL. stdout: standard output process evaluating stderr: standard error process evaluating func call. error: error contains error object, contains error thrown subprocess. Otherwise NULL. code, message: fields used call internally can ignore .","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-call-","dir":"Reference","previous_headings":"","what":"Method call()","title":"External R Session — r_session","text":"Starts running function background R session, returns immediately. check function done, call poll_process() method.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$call(func, args = list(), package = FALSE)"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Session — r_session","text":"func Function object call background R process. Please read notes similar argument r(). args Arguments pass function. Must list. package Whether keep environment func passing package. Possible values : FALSE: reset environment .GlobalEnv. default. TRUE: keep environment . pkg: set environment pkg package namespace.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-poll-process-","dir":"Reference","previous_headings":"","what":"Method poll_process()","title":"External R Session — r_session","text":"Poll R session timeout. session finished computation, returns \"ready\". timeout reached, returns \"timeout\".","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$poll_process(timeout)"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Session — r_session","text":"timeout Timeout period milliseconds.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Session — r_session","text":"Character string \"ready\" \"timeout\".","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-get-state-","dir":"Reference","previous_headings":"","what":"Method get_state()","title":"External R Session — r_session","text":"Return state R session.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$get_state()"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Session — r_session","text":"Possible values: \"starting\": starting , \"idle\": ready compute, \"busy\": computing right now, \"finished\": R process finished.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-get-running-time-","dir":"Reference","previous_headings":"","what":"Method get_running_time()","title":"External R Session — r_session","text":"Returns elapsed time since R process started, elapsed time since current computation started. latter NA active computation.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$get_running_time()"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Session — r_session","text":"Named vector POSIXct objects. names \"total\" \"current\".","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-read-","dir":"Reference","previous_headings":"","what":"Method read()","title":"External R Session — r_session","text":"Reads event child process, one available. Events might signal function call finished, can progress report events. low level function need use want process events (messages) R session manually.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$read()"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Session — r_session","text":"NULL events available. Otherwise named list, also callr_session_result object. list always code entry type event. See also r_session$public_fields$status symbolic names event types. 200: (DONE) computation done, event includes result, form run() method. 201: (STARTED) R session 'starting' state ready go. 202: (ATTACH_DONE) Used attach() method. 301: (MSG) message subprocess. message condition object class callr_message. (typically classes, e.g. cli_message output cli package.) 500: (EXITED) R session finished cleanly. means evaluated expression quit R. 501: (CRASHED) R session crashed killed. 502: (CLOSED) R session closed end connection callr uses communication.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"External R Session — r_session","text":"Terminate current computation R process. session object \"finished\" state .","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$close(grace = 1000)"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Session — r_session","text":"grace Grace period milliseconds, wait subprocess exit cleanly, standard input closed. process still running period, killed.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-traceback-","dir":"Reference","previous_headings":"","what":"Method traceback()","title":"External R Session — r_session","text":"traceback() method can used error R subprocess. equivalent base::traceback() call, subprocess. callr version 3.8.0 , need set callr.traceback option TRUE (main process) make subprocess save trace error. saving trace can costly large objects passed arguments.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$traceback()"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"External R Session — r_session","text":"output base::traceback()","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-debug-","dir":"Reference","previous_headings":"","what":"Method debug()","title":"External R Session — r_session","text":"Interactive debugger inspect dumped frames subprocess, error. See r_session_debug. callr version 3.8.0 , need set callr.traceback option TRUE (main process) make subprocess dump frames error. saving frames can costly large objects passed arguments.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$debug()"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-attach-","dir":"Reference","previous_headings":"","what":"Method attach()","title":"External R Session — r_session","text":"Experimental function provides REPL (Read-Eval-Print-Loop) subprocess.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$attach()"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"External R Session — r_session","text":"Print method r_session.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$print(...)"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Session — r_session","text":"... Arguments used currently.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"External R Session — r_session","text":"objects class cloneable method.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"External R Session — r_session","text":"","code":"r_session$clone(deep = FALSE)"},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R Session — r_session","text":"deep Whether make deep clone.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"External R Session — r_session","text":"","code":"if (FALSE) { rs <- r_session$new()  rs$run(function() 1 + 2)  rs$call(function() Sys.sleep(1)) rs$get_state()  rs$poll_process(-1) rs$get_state() rs$read() }"},{"path":"https://callr.r-lib.org/dev/reference/r_session_debug.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive debugging of persistent R sessions — r_session_debug","title":"Interactive debugging of persistent R sessions — r_session_debug","text":"r_session$debug() method interactive debugger inspect stack background process error.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session_debug.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interactive debugging of persistent R sessions — r_session_debug","text":"Note callr version 3.8.0 , need set callr.traceback option TRUE (main process) make subprocess dump frames error. saving frames can costly large objects passed arguments. $debug() starts REPL (Read-Eval-Print-Loop), evaluates R expressions subprocess. similar browser() debugger() also extra commands: .help prints short help message. .prints complete stack trace error. ($traceback() method. .inspect <n> switches \"focus\" frame <n>. Frame 0 global environment, .inspect 0 switch back . exit debugger, press usual interrupt key, .e. CTRL+c ESC GUIs. example session uses $debug() (output omitted brevity):","code":"# ---------------------------------------------------------------------- > rs <- r_session$new() > rs$run(function() knitr::knit(\"no-such-file\")) Error in rs_run(self, private, func, args) :  callr subprocess failed: cannot open the connection  > rs$debug() Debugging in process 87361, press CTRL+C (ESC) to quit. Commands:   .where       -- print stack trace   .inspect <n> -- inspect a frame, 0 resets to .GlobalEnv   .help        -- print this message   <cmd>        -- run <cmd> in frame or .GlobalEnv  3: file(con, \"r\") 2: readLines(input2, encoding = \"UTF-8\", warn = FALSE) 1: knitr::knit(\"no-such-file\") at #1  RS 87361 > .inspect 1  RS 87361 (frame 1) > ls()  [1] \"encoding\"  \"envir\"     \"ext\"       \"in.file\"   \"input\"     \"input.dir\"  [7] \"input2\"    \"ocode\"     \"oconc\"     \"oenvir\"    \"oopts\"     \"optc\" [13] \"optk\"      \"otangle\"   \"out.purl\"  \"output\"    \"quiet\"     \"tangle\" [19] \"text\"  RS 87361 (frame 1) > input [1] \"no-such-file\"  RS 87361 (frame 1) > file.exists(input) [1] FALSE  RS 87361 (frame 1) > # <CTRL + C> # ----------------------------------------------------------------------"},{"path":"https://callr.r-lib.org/dev/reference/r_session_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create options for an r_session object — r_session_options","title":"Create options for an r_session object — r_session_options","text":"Create options r_session object","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create options for an r_session object — r_session_options","text":"","code":"r_session_options(...)"},{"path":"https://callr.r-lib.org/dev/reference/r_session_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create options for an r_session object — r_session_options","text":"... Options override, named arguments.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create options for an r_session object — r_session_options","text":"Named list options. current options : libpath: Library path subprocess. default current library path. .e. necessarily library path fresh R session.) repos: repos option subprocess. default current value main process. stdout: Standard output sub-process. can NULL pipe: \"|\". pipe output subprocess included responses, need poll read manually. experts. Note option used startup phase currently always runs stdout = \"|\". stderr: Similar stdout, standard error. Like stdout, used startup phase, runs stderr = \"|\". error: See 'Error handling' r(). cmdargs: See argument r(). (default might different, though.) system_profile: See argument r(). user_profile: See argument r(). env: See argument r(). load_hook: NULL, code (quoted) run sub-process start . (.e. every single run() call.) extra: List extra arguments pass processx::process. Call r_session_options() see default values. r_session_options() might contain undocumented entries, change .","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_session_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create options for an r_session object — r_session_options","text":"","code":"r_session_options() #> $func #> NULL #>  #> $args #> NULL #>  #> $libpath #> [1] \"/home/runner/work/_temp/Library\" \"/opt/R/4.4.2/lib/R/site-library\" #> [3] \"/opt/R/4.4.2/lib/R/library\"      #>  #> $repos #>                                                          RSPM  #> \"https://packagemanager.posit.co/cran/__linux__/noble/latest\"  #>                                                          CRAN  #>                                    \"https://cran.rstudio.com\"  #>  #> $stdout #> NULL #>  #> $stderr #> NULL #>  #> $error #> [1] \"error\" #>  #> $cmdargs #> [1] \"--no-readline\" \"--slave\"       \"--no-save\"     \"--no-restore\"  #>  #> $system_profile #> [1] FALSE #>  #> $user_profile #> [1] \"project\" #>  #> $env #>   TERM  #> \"dumb\"  #>  #> $supervise #> [1] FALSE #>  #> $load_hook #> NULL #>  #> $extra #> list() #>  #> $arch #> [1] \"same\" #>"},{"path":"https://callr.r-lib.org/dev/reference/r_vanilla.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an R child process, with no configuration — r_vanilla","title":"Run an R child process, with no configuration — r_vanilla","text":"tries mimic fresh R installation. particular: library path setting. CRAN(-like) repository set. system user profiles run.","code":""},{"path":"https://callr.r-lib.org/dev/reference/r_vanilla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an R child process, with no configuration — r_vanilla","text":"","code":"r_vanilla(   func,   args = list(),   libpath = character(),   repos = c(CRAN = \"@CRAN@\"),   cmdargs = \"--slave\",   system_profile = FALSE,   user_profile = FALSE,   env = character(),   ... )"},{"path":"https://callr.r-lib.org/dev/reference/r_vanilla.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an R child process, with no configuration — r_vanilla","text":"func Function object call new R process. function self-contained refer functions use variables explicitly packages using :: notation. default environment function set .GlobalEnv passing child process. (See package option want keep environment.) , good practice create anonymous function pass callr, instead passing function object (base ) package. particular   work, .libPaths defined special environment,   works just fine. args Arguments pass function. Must list. libpath library path. repos repos option. NULL, repos option set. options used user_profile system_profile set FALSE, set using system user profile. cmdargs Command line arguments pass R process. Note c(\"-f\", rscript) appended , rscript name script file run. contains call supplied function error handling code. system_profile Whether use system profile file. user_profile Whether use user's profile file. \"project\", profile working directory used, R_PROFILE_USER environment variable user level profile . See also \"Security considerations\" . env Environment variables set child process. ... Additional arguments passed r().","code":"r(.libPaths) r(function() .libPaths())"},{"path":"https://callr.r-lib.org/dev/reference/r_vanilla.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"Run an R child process, with no configuration — r_vanilla","text":"callr makes copy user's .Renviron file potentially local user .Rprofile, session temporary directory. Avoid storing sensitive information passwords, environment file profile, otherwise information get scattered various files, least temporarily, subprocess finishes. can use keyring package avoid passwords plain files.","code":""},{"path":[]},{"path":"https://callr.r-lib.org/dev/reference/r_vanilla.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run an R child process, with no configuration — r_vanilla","text":"","code":"if (FALSE) { # Compare to r() r(function() .libPaths()) r_vanilla(function() .libPaths())  r(function() getOption(\"repos\")) r_vanilla(function() getOption(\"repos\")) }"},{"path":"https://callr.r-lib.org/dev/reference/rcmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an R CMD command — rcmd","title":"Run an R CMD command — rcmd","text":"Run R CMD command form within R. usually start another R process, shell script.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an R CMD command — rcmd","text":"","code":"rcmd(   cmd,   cmdargs = character(),   libpath = .libPaths(),   repos = default_repos(),   stdout = NULL,   stderr = NULL,   poll_connection = TRUE,   echo = FALSE,   show = FALSE,   callback = NULL,   block_callback = NULL,   spinner = show && interactive(),   system_profile = FALSE,   user_profile = \"project\",   env = rcmd_safe_env(),   timeout = Inf,   wd = \".\",   fail_on_status = FALSE,   ... )  rcmd_safe(   cmd,   cmdargs = character(),   libpath = .libPaths(),   repos = default_repos(),   stdout = NULL,   stderr = NULL,   poll_connection = TRUE,   echo = FALSE,   show = FALSE,   callback = NULL,   block_callback = NULL,   spinner = show && interactive(),   system_profile = FALSE,   user_profile = \"project\",   env = rcmd_safe_env(),   timeout = Inf,   wd = \".\",   fail_on_status = FALSE,   ... )"},{"path":"https://callr.r-lib.org/dev/reference/rcmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an R CMD command — rcmd","text":"cmd Command run. See R --help command line various commands. current version R (3.2.4) : BATCH, COMPILE, SHLIB, INSTALL, REMOVE, build, check, LINK, Rprof, Rdconv, Rd2pdf, Rd2txt, Stangle, Sweave, Rdiff, config, javareconf, rtags. cmdargs Command line arguments. libpath library path. repos repos option. NULL, repos option set. options used user_profile system_profile set FALSE, set using system user profile. stdout Optionally file name send standard output . stderr Optionally file name send standard error . may stdout, case standard error redirected standard output. can also special string \"2>&1\", case standard error redirected standard output. poll_connection Whether control connection process. used transmit messages subprocess parent. echo Whether echo complete command run rcmd. show Logical, whether show standard output screen child process running. Note independent stdout stderr arguments. standard error shown currently. callback function call line standard output standard error child process. works together show option; .e. show = TRUE, callback provided, output shown screen, callback also called. block_callback function call block standard output standard error. callback line oriented, .e. multiple lines half line can passed callback. spinner Whether show calming spinner screen child R session running. default shown show = TRUE R session interactive. system_profile Whether use system profile file. user_profile Whether use user's profile file. \"project\", profile working directory used, R_PROFILE_USER environment variable user level profile . See also \"Security considerations\" . env Environment variables set child process. timeout Timeout function call finish. can base::difftime object, real number, meaning seconds. process finish timeout period expires, system_command_timeout_error error thrown. Inf means timeout. wd Working directory use running command. Defaults current working directory. fail_on_status Whether throw R error command returns non-zero status code. default error thrown. ... Extra arguments passed processx::run().","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run an R CMD command — rcmd","text":"list command line $command), standard output ($stdout), standard error (stderr), exit status ($status) external R CMD command, whether timeout reached ($timeout).","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run an R CMD command — rcmd","text":"Starting callr 2.0.0, rcmd() safer defaults, rcmd_safe() default values. Use rcmd_copycat() old defaults.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"Run an R CMD command — rcmd","text":"callr makes copy user's .Renviron file potentially local user .Rprofile, session temporary directory. Avoid storing sensitive information passwords, environment file profile, otherwise information get scattered various files, least temporarily, subprocess finishes. can use keyring package avoid passwords plain files.","code":""},{"path":[]},{"path":"https://callr.r-lib.org/dev/reference/rcmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run an R CMD command — rcmd","text":"","code":"if (FALSE) { rcmd(\"config\", \"CC\") }"},{"path":"https://callr.r-lib.org/dev/reference/rcmd_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an R CMD command in the background — rcmd_bg","title":"Run an R CMD command in the background — rcmd_bg","text":"child process started background, function return immediately.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an R CMD command in the background — rcmd_bg","text":"","code":"rcmd_bg(   cmd,   cmdargs = character(),   libpath = .libPaths(),   stdout = \"|\",   stderr = \"|\",   poll_connection = TRUE,   repos = default_repos(),   system_profile = FALSE,   user_profile = \"project\",   env = rcmd_safe_env(),   wd = \".\",   supervise = FALSE,   ... )"},{"path":"https://callr.r-lib.org/dev/reference/rcmd_bg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an R CMD command in the background — rcmd_bg","text":"cmd Command run. See R --help command line various commands. current version R (3.2.4) : BATCH, COMPILE, SHLIB, INSTALL, REMOVE, build, check, LINK, Rprof, Rdconv, Rd2pdf, Rd2txt, Stangle, Sweave, Rdiff, config, javareconf, rtags. cmdargs Command line arguments. libpath library path. stdout Optionally file name send standard output . stderr Optionally file name send standard error . may stdout, case standard error redirected standard output. can also special string \"2>&1\", case standard error redirected standard output. poll_connection Whether control connection process. used transmit messages subprocess parent. repos repos option. NULL, repos option set. options used user_profile system_profile set FALSE, set using system user profile. system_profile Whether use system profile file. user_profile Whether use user's profile file. \"project\", profile working directory used, R_PROFILE_USER environment variable user level profile . See also \"Security considerations\" . env Environment variables set child process. wd Working directory use running command. Defaults current working directory. supervise Whether register process supervisor. TRUE, supervisor ensure process killed R process exits. ... Extra arguments passed processx::process constructor.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_bg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run an R CMD command in the background — rcmd_bg","text":"returns process object.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_bg.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"Run an R CMD command in the background — rcmd_bg","text":"callr makes copy user's .Renviron file potentially local user .Rprofile, session temporary directory. Avoid storing sensitive information passwords, environment file profile, otherwise information get scattered various files, least temporarily, subprocess finishes. can use keyring package avoid passwords plain files.","code":""},{"path":[]},{"path":"https://callr.r-lib.org/dev/reference/rcmd_copycat.html","id":null,"dir":"Reference","previous_headings":"","what":"Call and R CMD command, while mimicking the current R session — rcmd_copycat","title":"Call and R CMD command, while mimicking the current R session — rcmd_copycat","text":"function similar rcmd(), slightly different defaults: repos options unchanged. extra environment variables defined.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_copycat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call and R CMD command, while mimicking the current R session — rcmd_copycat","text":"","code":"rcmd_copycat(   cmd,   cmdargs = character(),   libpath = .libPaths(),   repos = getOption(\"repos\"),   env = character(),   ... )"},{"path":"https://callr.r-lib.org/dev/reference/rcmd_copycat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call and R CMD command, while mimicking the current R session — rcmd_copycat","text":"cmd Command run. See R --help command line various commands. current version R (3.2.4) : BATCH, COMPILE, SHLIB, INSTALL, REMOVE, build, check, LINK, Rprof, Rdconv, Rd2pdf, Rd2txt, Stangle, Sweave, Rdiff, config, javareconf, rtags. cmdargs Command line arguments. libpath library path. repos repos option. NULL, repos option set. options used user_profile system_profile set FALSE, set using system user profile. env Environment variables set child process. ... Additional arguments passed rcmd().","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_copycat.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"Call and R CMD command, while mimicking the current R session — rcmd_copycat","text":"callr makes copy user's .Renviron file potentially local user .Rprofile, session temporary directory. Avoid storing sensitive information passwords, environment file profile, otherwise information get scattered various files, least temporarily, subprocess finishes. can use keyring package avoid passwords plain files.","code":""},{"path":[]},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":null,"dir":"Reference","previous_headings":"","what":"External R CMD Process — rcmd_process","title":"External R CMD Process — rcmd_process","text":"R CMD * command runs background. R6 class extends processx::process class.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"External R CMD Process — rcmd_process","text":"processx::process -> rcmd_process","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"External R CMD Process — rcmd_process","text":"processx::process$as_ps_handle() processx::process$finalize() processx::process$format() processx::process$get_cmdline() processx::process$get_cpu_times() processx::process$get_error_connection() processx::process$get_error_file() processx::process$get_exe() processx::process$get_exit_status() processx::process$get_input_connection() processx::process$get_input_file() processx::process$get_memory_info() processx::process$get_name() processx::process$get_output_connection() processx::process$get_output_file() processx::process$get_pid() processx::process$get_poll_connection() processx::process$get_result() processx::process$get_start_time() processx::process$get_status() processx::process$get_username() processx::process$get_wd() processx::process$has_error_connection() processx::process$has_input_connection() processx::process$has_output_connection() processx::process$has_poll_connection() processx::process$interrupt() processx::process$is_alive() processx::process$is_incomplete_error() processx::process$is_incomplete_output() processx::process$is_supervised() processx::process$kill() processx::process$kill_tree() processx::process$poll_io() processx::process$print() processx::process$read_all_error() processx::process$read_all_error_lines() processx::process$read_all_output() processx::process$read_all_output_lines() processx::process$read_error() processx::process$read_error_lines() processx::process$read_output() processx::process$read_output_lines() processx::process$resume() processx::process$signal() processx::process$supervise() processx::process$suspend() processx::process$wait() processx::process$write_input()","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"External R CMD Process — rcmd_process","text":"rcmd_process$new() rcmd_process$clone()","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"External R CMD Process — rcmd_process","text":"Start R CMD process.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"External R CMD Process — rcmd_process","text":"","code":"rcmd_process$new(options)"},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R CMD Process — rcmd_process","text":"options list options created via rcmd_process_options().","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"External R CMD Process — rcmd_process","text":"new rcmd_process object.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"External R CMD Process — rcmd_process","text":"objects class cloneable method.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"External R CMD Process — rcmd_process","text":"","code":"rcmd_process$clone(deep = FALSE)"},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"External R CMD Process — rcmd_process","text":"deep Whether make deep clone.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"External R CMD Process — rcmd_process","text":"","code":"if (FALSE) { options <- rcmd_process_options(cmd = \"config\", cmdargs = \"CC\") rp <- rcmd_process$new(options) rp$wait() rp$read_output_lines() }"},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create options for an rcmd_process object — rcmd_process_options","title":"Create options for an rcmd_process object — rcmd_process_options","text":"Create options rcmd_process object","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create options for an rcmd_process object — rcmd_process_options","text":"","code":"rcmd_process_options(...)"},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create options for an rcmd_process object — rcmd_process_options","text":"... Options override, named arguments.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create options for an rcmd_process object — rcmd_process_options","text":"list options. rcmd_process_options() creates set options initialize new object rcmd_process class. arguments must named, names used option names. options correspond () arguments rcmd() function. least cmd option must specified, select R CMD subcommand run. Typically cmdargs specified well, supply arguments R CMD.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_process_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create options for an rcmd_process object — rcmd_process_options","text":"","code":"## List all options and their default values: rcmd_process_options() #> $cmd #> NULL #>  #> $cmdargs #> character(0) #>  #> $libpath #> [1] \"/home/runner/work/_temp/Library\" \"/opt/R/4.4.2/lib/R/site-library\" #> [3] \"/opt/R/4.4.2/lib/R/library\"      #>  #> $stdout #> [1] \"|\" #>  #> $stderr #> [1] \"|\" #>  #> $poll_connection #> [1] TRUE #>  #> $repos #>                                                          RSPM  #> \"https://packagemanager.posit.co/cran/__linux__/noble/latest\"  #>                                                          CRAN  #>                                    \"https://cran.rstudio.com\"  #>  #> $system_profile #> [1] FALSE #>  #> $user_profile #> [1] \"project\" #>  #> $env #>             CYGWIN            R_TESTS          R_BROWSER  #> \"nodosfilewarning\"                 \"\"            \"false\"  #>        R_PDFVIEWER  #>            \"false\"  #>  #> $wd #> [1] \".\" #>  #> $supervise #> [1] FALSE #>  #> $extra #> list() #>  #> $arch #> [1] \"same\" #>"},{"path":"https://callr.r-lib.org/dev/reference/rcmd_safe_env.html","id":null,"dir":"Reference","previous_headings":"","what":"rcmd_safe_env returns a set of environment variables that are more appropriate for rcmd_safe(). It is exported to allow manipulating these variables (e.g. add an extra one), before passing them to the rcmd() functions. — rcmd_safe_env","title":"rcmd_safe_env returns a set of environment variables that are more appropriate for rcmd_safe(). It is exported to allow manipulating these variables (e.g. add an extra one), before passing them to the rcmd() functions. — rcmd_safe_env","text":"currently following variables: CYGWIN=\"nodosfilewarning\": Windows, warn MS-DOS style file names. R_TESTS=\"\" variable set R CMD check, makes child R process load startup file startup, current working directory, assumed /test directory package checked. current working directory changed something else (typically testthat, R start. Setting empty string ensures callr can used unit tests. R_BROWSER=\"false\": typically want start browser child R process. R_PDFVIEWER=\"false\": similarly PDF viewer.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_safe_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rcmd_safe_env returns a set of environment variables that are more appropriate for rcmd_safe(). It is exported to allow manipulating these variables (e.g. add an extra one), before passing them to the rcmd() functions. — rcmd_safe_env","text":"","code":"rcmd_safe_env()"},{"path":"https://callr.r-lib.org/dev/reference/rcmd_safe_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rcmd_safe_env returns a set of environment variables that are more appropriate for rcmd_safe(). It is exported to allow manipulating these variables (e.g. add an extra one), before passing them to the rcmd() functions. — rcmd_safe_env","text":"named character vector environment variables.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rcmd_safe_env.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rcmd_safe_env returns a set of environment variables that are more appropriate for rcmd_safe(). It is exported to allow manipulating these variables (e.g. add an extra one), before passing them to the rcmd() functions. — rcmd_safe_env","text":"Note callr also sets R_ENVIRON, R_ENVIRON_USER, R_PROFILE R_PROFILE_USER environment variables appropriately, unless set user env argument r, etc. calls.","code":""},{"path":"https://callr.r-lib.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. processx poll, process, run","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an R script — rscript","title":"Run an R script — rscript","text":"uses Rscript program corresponding current R version, run script. streams stdout stderr process.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an R script — rscript","text":"","code":"rscript(   script,   cmdargs = character(),   libpath = .libPaths(),   repos = default_repos(),   stdout = NULL,   stderr = NULL,   poll_connection = TRUE,   echo = FALSE,   show = TRUE,   callback = NULL,   block_callback = NULL,   spinner = FALSE,   system_profile = FALSE,   user_profile = \"project\",   env = rcmd_safe_env(),   timeout = Inf,   wd = \".\",   fail_on_status = TRUE,   color = TRUE,   ... )"},{"path":"https://callr.r-lib.org/dev/reference/rscript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an R script — rscript","text":"script Path script run. cmdargs Command line arguments. libpath library path. repos repos option. NULL, repos option set. options used user_profile system_profile set FALSE, set using system user profile. stdout Optionally file name send standard output . stderr Optionally file name send standard error . may stdout, case standard error redirected standard output. can also special string \"2>&1\", case standard error redirected standard output. poll_connection Whether control connection process. used transmit messages subprocess parent. echo Whether echo complete command run rcmd. show Logical, whether show standard output screen child process running. Note independent stdout stderr arguments. standard error shown currently. callback function call line standard output standard error child process. works together show option; .e. show = TRUE, callback provided, output shown screen, callback also called. block_callback function call block standard output standard error. callback line oriented, .e. multiple lines half line can passed callback. spinner Whether show calming spinner screen child R session running. default shown show = TRUE R session interactive. system_profile Whether use system profile file. user_profile Whether use user's profile file. \"project\", profile working directory used, R_PROFILE_USER environment variable user level profile . See also \"Security considerations\" . env Environment variables set child process. timeout Timeout function call finish. can base::difftime object, real number, meaning seconds. process finish timeout period expires, system_command_timeout_error error thrown. Inf means timeout. wd Working directory use running command. Defaults current working directory. fail_on_status Whether throw R error command returns non-zero status code. default error thrown. color Whether use terminal colors child process, assuming active parent process. ... Extra arguments passed processx::run().","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript.html","id":"security-considerations","dir":"Reference","previous_headings":"","what":"Security considerations","title":"Run an R script — rscript","text":"callr makes copy user's .Renviron file potentially local user .Rprofile, session temporary directory. Avoid storing sensitive information passwords, environment file profile, otherwise information get scattered various files, least temporarily, subprocess finishes. can use keyring package avoid passwords plain files.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":null,"dir":"Reference","previous_headings":"","what":"External Rscript process — rscript_process","title":"External Rscript process — rscript_process","text":"Rscript script.R command runs background. R6 class extends processx::process class.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"External Rscript process — rscript_process","text":"processx::process -> rscript_process","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"External Rscript process — rscript_process","text":"processx::process$as_ps_handle() processx::process$finalize() processx::process$format() processx::process$get_cmdline() processx::process$get_cpu_times() processx::process$get_error_connection() processx::process$get_error_file() processx::process$get_exe() processx::process$get_exit_status() processx::process$get_input_connection() processx::process$get_input_file() processx::process$get_memory_info() processx::process$get_name() processx::process$get_output_connection() processx::process$get_output_file() processx::process$get_pid() processx::process$get_poll_connection() processx::process$get_result() processx::process$get_start_time() processx::process$get_status() processx::process$get_username() processx::process$get_wd() processx::process$has_error_connection() processx::process$has_input_connection() processx::process$has_output_connection() processx::process$has_poll_connection() processx::process$interrupt() processx::process$is_alive() processx::process$is_incomplete_error() processx::process$is_incomplete_output() processx::process$is_supervised() processx::process$kill() processx::process$kill_tree() processx::process$poll_io() processx::process$print() processx::process$read_all_error() processx::process$read_all_error_lines() processx::process$read_all_output() processx::process$read_all_output_lines() processx::process$read_error() processx::process$read_error_lines() processx::process$read_output() processx::process$read_output_lines() processx::process$resume() processx::process$signal() processx::process$supervise() processx::process$suspend() processx::process$wait() processx::process$write_input()","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"External Rscript process — rscript_process","text":"rscript_process$new() rscript_process$clone()","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"External Rscript process — rscript_process","text":"Create new Rscript process.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"External Rscript process — rscript_process","text":"","code":"rscript_process$new(options)"},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"External Rscript process — rscript_process","text":"options list options created via rscript_process_options().","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"External Rscript process — rscript_process","text":"objects class cloneable method.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"External Rscript process — rscript_process","text":"","code":"rscript_process$clone(deep = FALSE)"},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"External Rscript process — rscript_process","text":"deep Whether make deep clone.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"External Rscript process — rscript_process","text":"","code":"if (FALSE) { options <- rscript_process_options(script = \"script.R\") rp <- rscript_process$new(options) rp$wait() rp$read_output_lines() }"},{"path":"https://callr.r-lib.org/dev/reference/rscript_process_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create options for an rscript_process object — rscript_process_options","title":"Create options for an rscript_process object — rscript_process_options","text":"Create options rscript_process object","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create options for an rscript_process object — rscript_process_options","text":"","code":"rscript_process_options(...)"},{"path":"https://callr.r-lib.org/dev/reference/rscript_process_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create options for an rscript_process object — rscript_process_options","text":"... Options override, named arguments.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create options for an rscript_process object — rscript_process_options","text":"list options. rscript_process_options() creates set options initialize new object rscript_process class. arguments must named, names used option names. options correspond () arguments rscript() function. least script option must specified, script file run.","code":""},{"path":"https://callr.r-lib.org/dev/reference/rscript_process_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create options for an rscript_process object — rscript_process_options","text":"","code":"## List all options and their default values: rscript_process_options() #> $script #> NULL #>  #> $cmdargs #> character(0) #>  #> $libpath #> [1] \"/home/runner/work/_temp/Library\" \"/opt/R/4.4.2/lib/R/site-library\" #> [3] \"/opt/R/4.4.2/lib/R/library\"      #>  #> $stdout #> [1] \"|\" #>  #> $stderr #> [1] \"|\" #>  #> $poll_connection #> [1] TRUE #>  #> $repos #>                                                          RSPM  #> \"https://packagemanager.posit.co/cran/__linux__/noble/latest\"  #>                                                          CRAN  #>                                    \"https://cran.rstudio.com\"  #>  #> $system_profile #> [1] FALSE #>  #> $user_profile #> [1] \"project\" #>  #> $env #>             CYGWIN            R_TESTS          R_BROWSER  #> \"nodosfilewarning\"                 \"\"            \"false\"  #>        R_PDFVIEWER  #>            \"false\"  #>  #> $wd #> [1] \".\" #>  #> $color #> [1] FALSE #>  #> $extra #> list() #>  #> $arch #> [1] \"same\" #>"},{"path":"https://callr.r-lib.org/dev/reference/supported_archs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find supported sub-architectures for the current R installation — supported_archs","title":"Find supported sub-architectures for the current R installation — supported_archs","text":"function uses heuristic, might fail, result taken best guess.","code":""},{"path":"https://callr.r-lib.org/dev/reference/supported_archs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find supported sub-architectures for the current R installation — supported_archs","text":"","code":"supported_archs()"},{"path":"https://callr.r-lib.org/dev/reference/supported_archs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find supported sub-architectures for the current R installation — supported_archs","text":"Character vector supported architectures. current R build multi-architecture build, empty string scalar returned.","code":""},{"path":"https://callr.r-lib.org/dev/reference/supported_archs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find supported sub-architectures for the current R installation — supported_archs","text":"","code":"supported_archs() #> [1] \"\""},{"path":[]},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-376","dir":"Changelog","previous_headings":"","what":"callr 3.7.6","title":"callr 3.7.6","text":"CRAN release: 2024-03-25 CALLR_NO_TEMP_DLLS=true env var set callr copy dll client DLL files , subprocess. default callr copies DLL file drives callr subprocess temporary directory loads (#273).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-375","dir":"Changelog","previous_headings":"","what":"callr 3.7.5","title":"callr 3.7.5","text":"CRAN release: 2024-02-19 changes.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-374","dir":"Changelog","previous_headings":"","what":"callr 3.7.4","title":"callr 3.7.4","text":"CRAN release: 2024-02-19 r_session$get_running_time() method now returns correct values, documented (#241, @djnavarro). callr now uses fully qualified function calls subprocess avoid interference functions defined global environment. .e. base::stderr() instead stderr(). Closes #246.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-373","dir":"Changelog","previous_headings":"","what":"callr 3.7.3","title":"callr 3.7.3","text":"CRAN release: 2022-11-02 Errors callr now include standard output ($stdout) standard error (stderr) . standard output error also printed error non-interactive sessions, note printed interactive sessions.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-372","dir":"Changelog","previous_headings":"","what":"callr 3.7.2","title":"callr 3.7.2","text":"CRAN release: 2022-08-22 New function add_hook() hook callr process startup options. experts also currently experimental (#203, @klmr).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-371","dir":"Changelog","previous_headings":"","what":"callr 3.7.1","title":"callr 3.7.1","text":"CRAN release: 2022-07-13 copying existing startup files, additional newline appended protect missing newline end file. cause R ignore line (#205). Serialization objects passed sessions now uses compress=FALSE default. default can changed setting callr.compress_transport option (#223, @dfalbel). revamped callr’s error objects, lots improvements output.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-370","dir":"Changelog","previous_headings":"","what":"callr 3.7.0","title":"callr 3.7.0","text":"CRAN release: 2021-04-20 Reporting errors much faster now (#185). user_profile option r_vanilla() defaults FALSE now (#194). now possible set R environment variables (R_ENVIRON_USER, R_PROFILE_USER, etc.) via env argument (#193).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-360","dir":"Changelog","previous_headings":"","what":"callr 3.6.0","title":"callr 3.6.0","text":"CRAN release: 2021-03-28 callr now supports starting R process different architecture, Windows 64-bit R can start 32-bit R background process, vice-versa (#95). callr now handles symbolic arguments properly, evaluate . E.g. callr::r(function(x) x, list(quote(foobar))) works now (#175). callr::r_session leak file descriptors now sub-process (#184).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-351","dir":"Changelog","previous_headings":"","what":"callr 3.5.1","title":"callr 3.5.1","text":"CRAN release: 2020-10-13 callr::r_session now handles large messages subprocess well (#168).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-350","dir":"Changelog","previous_headings":"","what":"callr 3.5.0","title":"callr 3.5.0","text":"CRAN release: 2020-10-08 callr can now pass environment function subprocess, optionally. makes easier call internal function package subprocess. See package argument r(), r_bg(), r_session$run(), etc. (#147).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-344","dir":"Changelog","previous_headings":"","what":"callr 3.4.4","title":"callr 3.4.4","text":"CRAN release: 2020-09-07 r_session now exits load hook errors. generates error session started wait = TRUE. wait = FALSE first $read() operation return error (#162).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-343","dir":"Changelog","previous_headings":"","what":"callr 3.4.3","title":"callr 3.4.3","text":"CRAN release: 2020-03-28 default_repos() now returns list getOption(\"repos\") list, vector otherwise, R 4.x.y well.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-342","dir":"Changelog","previous_headings":"","what":"callr 3.4.2","title":"callr 3.4.2","text":"CRAN release: 2020-02-12 Improved error messages. Error messages now fully printed error. non-interactive sessions, stack trace printed well.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-341","dir":"Changelog","previous_headings":"","what":"callr 3.4.1","title":"callr 3.4.1","text":"CRAN release: 2020-01-24 callr now careful loading local .Rprofile subprocess. fixes issues packrat renv use .Rprofile setup (#139). callr functions fail early environment file missing (#123, @jdblischak)","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-340","dir":"Changelog","previous_headings":"","what":"callr 3.4.0","title":"callr 3.4.0","text":"CRAN release: 2019-12-09 callr functions background processes properly clean temporary files now (#104). callr now uses principled setup library path, restores related environment variables child process. breaking change relied library set system() subprocess callr subprocess (#114). Better printing rlang_errors happened subprocess. stacking error objects slightly different now, keep unmodified error subprocess $parent$error. callr now loads .Rprofile files current working directory default. works better packrat, renv, software relies local profile initialization (#131).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-332","dir":"Changelog","previous_headings":"","what":"callr 3.3.2","title":"callr 3.3.2","text":"CRAN release: 2019-09-22 user visible changes version.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-331","dir":"Changelog","previous_headings":"","what":"callr 3.3.1","title":"callr 3.3.1","text":"CRAN release: 2019-07-18 r_session now avoids creating data env objects global environment subprocess. New $debug() method r_session inspect dumped frames subprocess, error.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-330","dir":"Changelog","previous_headings":"","what":"callr 3.3.0","title":"callr 3.3.0","text":"CRAN release: 2019-07-04 callr now sets .Last.error variable every uncaught callr error error condition, also sets .Last.error.trace stack trace. error originates subprocess, .Last.error hierarchical error object, .Last.error.trace merges traces two processes. See README.md example. New $traceback() method r_session, run traceback() subprocess, error. callr subprocess now load R packages default. New vignette, showcases r_session.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-320","dir":"Changelog","previous_headings":"","what":"callr 3.2.0","title":"callr 3.2.0","text":"CRAN release: 2019-03-15 r(), rcmd() rscript() can now redirect standard error subprocess standard output. allows keep correctly interleaved. , need either set stderr argument special string \"2>&1\", output file specified stdout. r(), rcmd() rscript() now pass ... arguments processx::run(). r_bg() rcmd_bg() pass ... arguments processx::process constructor. r_process, rcmd_process rscript_process extra arguments can specified options$extra, also passed processx::process constructor (#100).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-311","dir":"Changelog","previous_headings":"","what":"callr 3.1.1","title":"callr 3.1.1","text":"CRAN release: 2018-12-21 r(), r_bg(), etc. now handle messages cliapp package properly. used make R session exit. Better default repos option callr subprocesses. callr longer creates duplicate “CRAN” entries. default new default_repos() function used set repos subprocess.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-310","dir":"Changelog","previous_headings":"","what":"callr 3.1.0","title":"callr 3.1.0","text":"CRAN release: 2018-12-10 New rscript() function rscript_process class execute R scripts via Rscript (#40, #81). Library paths now correctly set system() (similar) calls callr subprocesses (#83, #84). Pass options(\"repos\") child process , without checking. Closes #82. r_session$run_with_output() now returns S3 object class callr_session_result. r_session$run*() handle interrupts properly. tries interrupt background process fist, kills interruptible, re-throws interrupt condition, going back top level prompt re-thrown condition uncaught.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-300","dir":"Changelog","previous_headings":"","what":"callr 3.0.0","title":"callr 3.0.0","text":"CRAN release: 2018-08-24 New r_session class: background R session can send commands (#56). Rewrote passing library path subprocess (#73, #75) Retain names repos option (#67, @jennybc)","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-204","dir":"Changelog","previous_headings":"","what":"callr 2.0.4","title":"callr 2.0.4","text":"CRAN release: 2018-05-15 pkgdown web site https://callr.r-lib.org (#52, #53). callr users .Renviron files now (R_ENVIRON_USER well), overrides library path, requested r(), etc. (#30). callr now handles case subprocess calls quit(). callr now uses processx package, instead embedded code, create control processes.","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-203","dir":"Changelog","previous_headings":"","what":"callr 2.0.3","title":"callr 2.0.3","text":"CRAN release: 2018-04-11 default behavior error can set now callr.error option. Better error message child R process crashes gets killed. (#41) r_bg rcmd_bg now supervise option (#45).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-202","dir":"Changelog","previous_headings":"","what":"callr 2.0.2","title":"callr 2.0.2","text":"CRAN release: 2018-02-11 Fix bug R-devel, caused change 2018-02-08: https://github.com/wch/r-source/commit/924582943706100e88a11d6bb0585d25779c91f5 #37, #38 Fix race condition Windows, creating named pipes stdout stderr. client sometimes didn’t wait server, callr failed ERROR_PIPE_BUSY (231, pipe instances busy).","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-201","dir":"Changelog","previous_headings":"","what":"callr 2.0.1","title":"callr 2.0.1","text":"CRAN release: 2018-01-30 Fix compilation issues Solaris Fix test failure macOS","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-200","dir":"Changelog","previous_headings":"","what":"callr 2.0.0","title":"callr 2.0.0","text":"CRAN release: 2018-01-28 Run R R CMD background, see r_bg(), rcmd_bg(), also r_process rcmd_process defaults r() safer now, match defaults r_safe(). r_safe() kept compatibility. r_copycat() old r() defaults. defaults rcmd() safer now, match defaults rcmd_safe(). rcmd_safe() kept compatibility. rcmd_copycat() old rcmd() defaults. Support block callbacks, addition line callbacks. Block callbacks called arbitrary chunks output, even without newline Add spinner argument show spinner r() rcmd() Support timeouts, via timeout argument Fix bug stdout stderr redirected file rcmd_safe_env() allow extending environment variables set safe mode rcmd() gets fail_on_status argument rcmd() gets echo argument potentially show command run screen (#15) rcmd() gets wd argument set working directory","code":""},{"path":"https://callr.r-lib.org/dev/news/index.html","id":"callr-100","dir":"Changelog","previous_headings":"","what":"callr 1.0.0","title":"callr 1.0.0","text":"CRAN release: 2016-06-18 First public release.","code":""}]
